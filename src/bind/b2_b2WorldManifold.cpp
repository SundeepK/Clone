/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2WorldManifold
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** Set attributes (key, value)
 * 
 */
static int b2WorldManifold__set_(lua_State *L) {

  b2WorldManifold *self = *((b2WorldManifold **)dub::checksdata_n(L, 1, "b2.b2WorldManifold"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "normal")) break;
      self->normal = **((b2Vec2 **)dub::checksdata_n(L, 3, "b2.b2Vec2"));
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2WorldManifold__get_(lua_State *L) {

  b2WorldManifold *self = *((b2WorldManifold **)dub::checksdata_n(L, 1, "b2.b2WorldManifold", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "normal")) break;
      dub::pushudata(L, &self->normal, "b2.b2Vec2", false);
      return 1;
    }
  }
  return 0;
}

/** b2WorldManifold()
 * 
 */
static int b2WorldManifold_b2WorldManifold(lua_State *L) {
  try {
    b2WorldManifold *retval__ = new b2WorldManifold();
    dub::pushudata(L, retval__, "b2.b2WorldManifold", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** Read points(size_t i)
 * 
 */
static int b2WorldManifold_points(lua_State *L) {
  try {
    b2WorldManifold *self = *((b2WorldManifold **)dub::checksdata(L, 1, "b2.b2WorldManifold"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      size_t i = dub::checkint(L, 2);
      b2Vec2 *v = *((b2Vec2 **)dub::checksdata(L, 3, "b2.b2Vec2"));
      if (!i || i > b2_maxManifoldPoints) return 0;
      self->points[i-1] = *v;
      return 0;
    } else {
      size_t i = dub::checkint(L, 2);
      if (!i || i > b2_maxManifoldPoints) return 0;
      dub::pushudata(L, new b2Vec2(self->points[i-1]), "b2.b2Vec2", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "points: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "points: Unknown exception");
  }
  return dub::error(L);
}

/** Read separations(size_t i)
 * 
 */
static int b2WorldManifold_separations(lua_State *L) {
  try {
    b2WorldManifold *self = *((b2WorldManifold **)dub::checksdata(L, 1, "b2.b2WorldManifold"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      size_t i = dub::checkint(L, 2);
      float32 v = dub::checknumber(L, 3);
      if (!i || i > b2_maxManifoldPoints) return 0;
      self->separations[i-1] = v;
      return 0;
    } else {
      size_t i = dub::checkint(L, 2);
      if (!i || i > b2_maxManifoldPoints) return 0;
      lua_pushnumber(L, self->separations[i-1]);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "separations: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "separations: Unknown exception");
  }
  return dub::error(L);
}

/** void b2WorldManifold::Initialize(const b2Manifold *manifold, const b2Transform &xfA, float32 radiusA, const b2Transform &xfB, float32 radiusB)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:116
 */
static int b2WorldManifold_Initialize(lua_State *L) {
  try {
    b2WorldManifold *self = *((b2WorldManifold **)dub::checksdata(L, 1, "b2.b2WorldManifold"));
    b2Manifold *manifold = *((b2Manifold **)dub::checksdata(L, 2, "b2.b2Manifold"));
    b2Transform *xfA = *((b2Transform **)dub::checksdata(L, 3, "b2.b2Transform"));
    float32 radiusA = dub::checknumber(L, 4);
    b2Transform *xfB = *((b2Transform **)dub::checksdata(L, 5, "b2.b2Transform"));
    float32 radiusB = dub::checknumber(L, 6);
    self->Initialize(manifold, *xfA, radiusA, *xfB, radiusB);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Initialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Initialize: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2WorldManifold___tostring(lua_State *L) {
  b2WorldManifold *self = *((b2WorldManifold **)dub::checksdata_n(L, 1, "b2.b2WorldManifold"));
  lua_pushfstring(L, "b2.b2WorldManifold: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2WorldManifold_member_methods[] = {
  { "__newindex"   , b2WorldManifold__set_ },
  { "__index"      , b2WorldManifold__get_ },
  { "new"          , b2WorldManifold_b2WorldManifold },
  { "points"       , b2WorldManifold_points },
  { "separations"  , b2WorldManifold_separations },
  { "Initialize"   , b2WorldManifold_Initialize },
  { "__tostring"   , b2WorldManifold___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2WorldManifold(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2WorldManifold");
  // <mt>

  // register member methods
  dub::fregister(L, b2WorldManifold_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2WorldManifold");
  // <mt>
  return 1;
}
