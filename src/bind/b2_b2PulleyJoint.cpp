/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2PulleyJoint
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** ~b2PulleyJoint()
 * 
 */
static int b2PulleyJoint__b2PulleyJoint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "b2.b2PulleyJoint"));
    if (userdata->gc) {
      b2PulleyJoint *self = (b2PulleyJoint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Cast (class_name)
 * 
 */
static int b2PulleyJoint__cast_(lua_State *L) {

  b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata_n(L, 1, "b2.b2PulleyJoint"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "b2.b2Joint")) break;
      *retval__ = static_cast<b2Joint *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2Vec2 b2PulleyJoint::GetAnchorA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:82
 */
static int b2PulleyJoint_GetAnchorA(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    dub::pushudata(L, new b2Vec2(self->GetAnchorA()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorA: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2PulleyJoint::GetAnchorB() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:83
 */
static int b2PulleyJoint_GetAnchorB(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    dub::pushudata(L, new b2Vec2(self->GetAnchorB()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorB: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2PulleyJoint::GetReactionForce(float32 inv_dt) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:85
 */
static int b2PulleyJoint_GetReactionForce(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    float32 inv_dt = dub::checknumber(L, 2);
    dub::pushudata(L, new b2Vec2(self->GetReactionForce(inv_dt)), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionForce: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PulleyJoint::GetReactionTorque(float32 inv_dt) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:86
 */
static int b2PulleyJoint_GetReactionTorque(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    float32 inv_dt = dub::checknumber(L, 2);
    lua_pushnumber(L, self->GetReactionTorque(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionTorque: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2PulleyJoint::GetGroundAnchorA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:89
 */
static int b2PulleyJoint_GetGroundAnchorA(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    dub::pushudata(L, new b2Vec2(self->GetGroundAnchorA()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetGroundAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetGroundAnchorA: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2PulleyJoint::GetGroundAnchorB() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:92
 */
static int b2PulleyJoint_GetGroundAnchorB(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    dub::pushudata(L, new b2Vec2(self->GetGroundAnchorB()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetGroundAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetGroundAnchorB: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PulleyJoint::GetLengthA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:95
 */
static int b2PulleyJoint_GetLengthA(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    lua_pushnumber(L, self->GetLengthA());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLengthA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLengthA: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PulleyJoint::GetLengthB() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:98
 */
static int b2PulleyJoint_GetLengthB(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    lua_pushnumber(L, self->GetLengthB());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLengthB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLengthB: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PulleyJoint::GetRatio() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:101
 */
static int b2PulleyJoint_GetRatio(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    lua_pushnumber(L, self->GetRatio());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetRatio: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetRatio: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PulleyJoint::GetCurrentLengthA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:104
 */
static int b2PulleyJoint_GetCurrentLengthA(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    lua_pushnumber(L, self->GetCurrentLengthA());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCurrentLengthA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCurrentLengthA: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PulleyJoint::GetCurrentLengthB() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:107
 */
static int b2PulleyJoint_GetCurrentLengthB(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    lua_pushnumber(L, self->GetCurrentLengthB());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCurrentLengthB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCurrentLengthB: Unknown exception");
  }
  return dub::error(L);
}

/** void b2PulleyJoint::Dump()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:110
 */
static int b2PulleyJoint_Dump(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    self->Dump();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dump: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dump: Unknown exception");
  }
  return dub::error(L);
}

/** void b2PulleyJoint::ShiftOrigin(const b2Vec2 &newOrigin)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.h:113
 */
static int b2PulleyJoint_ShiftOrigin(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    b2Vec2 *newOrigin = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    self->ShiftOrigin(*newOrigin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShiftOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShiftOrigin: Unknown exception");
  }
  return dub::error(L);
}

/** b2JointType b2Joint::GetType() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:108
 */
static int b2PulleyJoint_GetType(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    lua_pushnumber(L, self->GetType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetType: Unknown exception");
  }
  return dub::error(L);
}

/** b2Body * b2Joint::GetBodyA()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:111
 */
static int b2PulleyJoint_GetBodyA(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    b2Body *retval__ = self->GetBodyA();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyA: Unknown exception");
  }
  return dub::error(L);
}

/** b2Body * b2Joint::GetBodyB()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:114
 */
static int b2PulleyJoint_GetBodyB(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    b2Body *retval__ = self->GetBodyB();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyB: Unknown exception");
  }
  return dub::error(L);
}

/** b2Joint * b2Joint::GetNext()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:129
 */
static int b2PulleyJoint_GetNext(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    b2Joint *retval__ = self->GetNext();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetNext: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetNext: Unknown exception");
  }
  return dub::error(L);
}

/** void * b2Joint::GetUserData() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:133
 */
static int b2PulleyJoint_GetUserData(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    self->GetUserData();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUserData: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Joint::SetUserData(void *data)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:136
 */
static int b2PulleyJoint_SetUserData(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    void *data = *((void **)dub::checksdata(L, 2, "void"));
    self->SetUserData(data);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetUserData: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2Joint::IsActive() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:139
 */
static int b2PulleyJoint_IsActive(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    lua_pushboolean(L, self->IsActive());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsActive: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsActive: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2Joint::GetCollideConnected() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:144
 */
static int b2PulleyJoint_GetCollideConnected(lua_State *L) {
  try {
    b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata(L, 1, "b2.b2PulleyJoint"));
    lua_pushboolean(L, self->GetCollideConnected());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCollideConnected: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCollideConnected: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2PulleyJoint___tostring(lua_State *L) {
  b2PulleyJoint *self = *((b2PulleyJoint **)dub::checksdata_n(L, 1, "b2.b2PulleyJoint"));
  lua_pushfstring(L, "b2.b2PulleyJoint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2PulleyJoint_member_methods[] = {
  { "__gc"         , b2PulleyJoint__b2PulleyJoint },
  { "_cast_"       , b2PulleyJoint__cast_ },
  { "GetAnchorA"   , b2PulleyJoint_GetAnchorA },
  { "GetAnchorB"   , b2PulleyJoint_GetAnchorB },
  { "GetReactionForce", b2PulleyJoint_GetReactionForce },
  { "GetReactionTorque", b2PulleyJoint_GetReactionTorque },
  { "GetGroundAnchorA", b2PulleyJoint_GetGroundAnchorA },
  { "GetGroundAnchorB", b2PulleyJoint_GetGroundAnchorB },
  { "GetLengthA"   , b2PulleyJoint_GetLengthA },
  { "GetLengthB"   , b2PulleyJoint_GetLengthB },
  { "GetRatio"     , b2PulleyJoint_GetRatio },
  { "GetCurrentLengthA", b2PulleyJoint_GetCurrentLengthA },
  { "GetCurrentLengthB", b2PulleyJoint_GetCurrentLengthB },
  { "Dump"         , b2PulleyJoint_Dump   },
  { "ShiftOrigin"  , b2PulleyJoint_ShiftOrigin },
  { "GetType"      , b2PulleyJoint_GetType },
  { "GetBodyA"     , b2PulleyJoint_GetBodyA },
  { "GetBodyB"     , b2PulleyJoint_GetBodyB },
  { "GetNext"      , b2PulleyJoint_GetNext },
  { "GetUserData"  , b2PulleyJoint_GetUserData },
  { "SetUserData"  , b2PulleyJoint_SetUserData },
  { "IsActive"     , b2PulleyJoint_IsActive },
  { "GetCollideConnected", b2PulleyJoint_GetCollideConnected },
  { "__tostring"   , b2PulleyJoint___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2PulleyJoint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2PulleyJoint");
  // <mt>

  // register member methods
  dub::fregister(L, b2PulleyJoint_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2PulleyJoint");
  // <mt>
  return 1;
}
