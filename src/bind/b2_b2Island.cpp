/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2Island
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include  <Box2D/Dynamics/b2Island.h>h>

/** Set attributes (key, value)
 *
 */
static int b2Island__set_(lua_State *L) {

  b2Island *self = *((b2Island **)dub::checksdata_n(L, 1, "b2.b2Island"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub::hash(key, 40);
  switch(key_h) {
    case 25: {
      if (DUB_ASSERT_KEY(key, "m_allocator")) break;
      dub::protect(L, 1, 3, "m_allocator");
      self->m_allocator = *((b2StackAllocator **)dub::checksdata_n(L, 3, "b2.b2StackAllocator"));
      return 0;
    }
    case 6: {
      if (DUB_ASSERT_KEY(key, "m_listener")) break;
      dub::protect(L, 1, 3, "m_listener");
      self->m_listener = *((b2ContactListener **)dub::checksdata_n(L, 3, "b2.b2ContactListener"));
      return 0;
    }
    case 18: {
      if (DUB_ASSERT_KEY(key, "m_bodies")) break;
      dub::protect(L, 1, 3, "m_bodies");
      self->m_bodies = *((b2Body* **)dub::checksdata_n(L, 3, "b2Body*"));
      return 0;
    }
    case 29: {
      if (DUB_ASSERT_KEY(key, "m_contacts")) break;
      dub::protect(L, 1, 3, "m_contacts");
      self->m_contacts = *((b2Contact* **)dub::checksdata_n(L, 3, "b2Contact*"));
      return 0;
    }
    case 35: {
      if (DUB_ASSERT_KEY(key, "m_joints")) break;
      dub::protect(L, 1, 3, "m_joints");
      self->m_joints = *((b2Joint* **)dub::checksdata_n(L, 3, "b2Joint*"));
      return 0;
    }
    case 16: {
      if (DUB_ASSERT_KEY(key, "m_positions")) break;
      dub::protect(L, 1, 3, "m_positions");
      self->m_positions = *((b2Position **)dub::checksdata_n(L, 3, "b2.b2Position"));
      return 0;
    }
    case 21: {
      if (DUB_ASSERT_KEY(key, "m_velocities")) break;
      dub::protect(L, 1, 3, "m_velocities");
      self->m_velocities = *((b2Velocity **)dub::checksdata_n(L, 3, "b2.b2Velocity"));
      return 0;
    }
    case 27: {
      if (DUB_ASSERT_KEY(key, "m_bodyCount")) break;
      self->m_bodyCount = luaL_checkint(L, 3);
      return 0;
    }
    case 39: {
      if (DUB_ASSERT_KEY(key, "m_jointCount")) break;
      self->m_jointCount = luaL_checkint(L, 3);
      return 0;
    }
    case 17: {
      if (DUB_ASSERT_KEY(key, "m_contactCount")) break;
      self->m_contactCount = luaL_checkint(L, 3);
      return 0;
    }
    case 14: {
      if (DUB_ASSERT_KEY(key, "m_bodyCapacity")) break;
      self->m_bodyCapacity = luaL_checkint(L, 3);
      return 0;
    }
    case 8: {
      if (DUB_ASSERT_KEY(key, "m_contactCapacity")) break;
      self->m_contactCapacity = luaL_checkint(L, 3);
      return 0;
    }
    case 34: {
      if (DUB_ASSERT_KEY(key, "m_jointCapacity")) break;
      self->m_jointCapacity = luaL_checkint(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 *
 */
static int b2Island__get_(lua_State *L) {

  b2Island *self = *((b2Island **)dub::checksdata_n(L, 1, "b2.b2Island", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub::hash(key, 40);
  switch(key_h) {
    case 25: {
      if (DUB_ASSERT_KEY(key, "m_allocator")) break;
      b2StackAllocator *retval__ = self->m_allocator;
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "b2.b2StackAllocator", false);
      return 1;
    }
    case 6: {
      if (DUB_ASSERT_KEY(key, "m_listener")) break;
      b2ContactListener *retval__ = self->m_listener;
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "b2.b2ContactListener", false);
      return 1;
    }
    case 18: {
      if (DUB_ASSERT_KEY(key, "m_bodies")) break;
      b2Body* *retval__ = self->m_bodies;
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "b2Body*", false);
      return 1;
    }
    case 29: {
      if (DUB_ASSERT_KEY(key, "m_contacts")) break;
      b2Contact* *retval__ = self->m_contacts;
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "b2Contact*", false);
      return 1;
    }
    case 35: {
      if (DUB_ASSERT_KEY(key, "m_joints")) break;
      b2Joint* *retval__ = self->m_joints;
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "b2Joint*", false);
      return 1;
    }
    case 16: {
      if (DUB_ASSERT_KEY(key, "m_positions")) break;
      b2Position *retval__ = self->m_positions;
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "b2.b2Position", false);
      return 1;
    }
    case 21: {
      if (DUB_ASSERT_KEY(key, "m_velocities")) break;
      b2Velocity *retval__ = self->m_velocities;
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "b2.b2Velocity", false);
      return 1;
    }
    case 27: {
      if (DUB_ASSERT_KEY(key, "m_bodyCount")) break;
      lua_pushnumber(L, self->m_bodyCount);
      return 1;
    }
    case 39: {
      if (DUB_ASSERT_KEY(key, "m_jointCount")) break;
      lua_pushnumber(L, self->m_jointCount);
      return 1;
    }
    case 17: {
      if (DUB_ASSERT_KEY(key, "m_contactCount")) break;
      lua_pushnumber(L, self->m_contactCount);
      return 1;
    }
    case 14: {
      if (DUB_ASSERT_KEY(key, "m_bodyCapacity")) break;
      lua_pushnumber(L, self->m_bodyCapacity);
      return 1;
    }
    case 8: {
      if (DUB_ASSERT_KEY(key, "m_contactCapacity")) break;
      lua_pushnumber(L, self->m_contactCapacity);
      return 1;
    }
    case 34: {
      if (DUB_ASSERT_KEY(key, "m_jointCapacity")) break;
      lua_pushnumber(L, self->m_jointCapacity);
      return 1;
    }
  }
  return 0;
}

/** b2Island::b2Island(int32 bodyCapacity, int32 contactCapacity, int32 jointCapacity, b2StackAllocator *allocator, b2ContactListener *listener)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Island.h:37
 */
static int b2Island_b2Island(lua_State *L) {
  try {
    int32 bodyCapacity = dub::checkint(L, 1);
    int32 contactCapacity = dub::checkint(L, 2);
    int32 jointCapacity = dub::checkint(L, 3);
    b2StackAllocator *allocator = *((b2StackAllocator **)dub::checksdata(L, 4, "b2.b2StackAllocator"));
    b2ContactListener *listener = *((b2ContactListener **)dub::checksdata(L, 5, "b2.b2ContactListener"));
    b2Island *retval__ = new b2Island(bodyCapacity, contactCapacity, jointCapacity, allocator, listener);
    dub::pushudata(L, retval__, "b2.b2Island", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** b2Island::~b2Island()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Island.h:39
 */
static int b2Island__b2Island(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "b2.b2Island"));
    if (userdata->gc) {
      b2Island *self = (b2Island *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Island::Clear()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Island.h:41
 */
static int b2Island_Clear(lua_State *L) {
  try {
    b2Island *self = *((b2Island **)dub::checksdata(L, 1, "b2.b2Island"));
    self->Clear();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Clear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Clear: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Island::Solve(b2Profile *profile, const b2TimeStep &step, const b2Vec2 &gravity, bool allowSleep)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Island.h:48
 */
static int b2Island_Solve(lua_State *L) {
  try {
    b2Island *self = *((b2Island **)dub::checksdata(L, 1, "b2.b2Island"));
    b2Profile *profile = *((b2Profile **)dub::checksdata(L, 2, "b2.b2Profile"));
    b2TimeStep *step = *((b2TimeStep **)dub::checksdata(L, 3, "b2.b2TimeStep"));
    b2Vec2 *gravity = *((b2Vec2 **)dub::checksdata(L, 4, "b2.b2Vec2"));
    bool allowSleep = dub::checkboolean(L, 5);
    self->Solve(profile, *step, *gravity, allowSleep);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Solve: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Solve: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Island::SolveTOI(const b2TimeStep &subStep, int32 toiIndexA, int32 toiIndexB)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Island.h:50
 */
static int b2Island_SolveTOI(lua_State *L) {
  try {
    b2Island *self = *((b2Island **)dub::checksdata(L, 1, "b2.b2Island"));
    b2TimeStep *subStep = *((b2TimeStep **)dub::checksdata(L, 2, "b2.b2TimeStep"));
    int32 toiIndexA = dub::checkint(L, 3);
    int32 toiIndexB = dub::checkint(L, 4);
    self->SolveTOI(*subStep, toiIndexA, toiIndexB);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SolveTOI: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SolveTOI: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Island::Add(b2Body *body)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Island.h:52
 */
static int b2Island_Add(lua_State *L) {
  try {
    b2Island *self = *((b2Island **)dub::checksdata(L, 1, "b2.b2Island"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub::issdata(L, 2, "b2.b2Joint", type__)) ) {
      b2Joint *joint = *((b2Joint **)ptr2__);
      self->Add(joint);
      return 0;
    } else if ( (ptr2__ = dub::issdata(L, 2, "b2Contact", type__)) ) {
      b2Contact *contact = *((b2Contact **)ptr2__);
      self->Add(contact);
      return 0;
    } else {
      b2Body *body = *((b2Body **)dub::checksdata(L, 2, "b2.b2Body"));
      self->Add(body);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "Add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Add: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Island::Report(const b2ContactVelocityConstraint *constraints)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Island.h:72
 */
static int b2Island_Report(lua_State *L) {
  try {
    b2Island *self = *((b2Island **)dub::checksdata(L, 1, "b2.b2Island"));
    b2ContactVelocityConstraint *constraints = *((b2ContactVelocityConstraint **)dub::checksdata(L, 2, "b2ContactVelocityConstraint"));
    self->Report(constraints);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Report: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Report: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2Island___tostring(lua_State *L) {
  b2Island *self = *((b2Island **)dub::checksdata_n(L, 1, "b2.b2Island"));
  lua_pushfstring(L, "b2.b2Island: %p", self);

  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2Island_member_methods[] = {
  { "__newindex"   , b2Island__set_       },
  { "__index"      , b2Island__get_       },
  { "new"          , b2Island_b2Island    },
  { "__gc"         , b2Island__b2Island   },
  { "Clear"        , b2Island_Clear       },
  { "Solve"        , b2Island_Solve       },
  { "SolveTOI"     , b2Island_SolveTOI    },
  { "Add"          , b2Island_Add         },
  { "Report"       , b2Island_Report      },
  { "__tostring"   , b2Island___tostring  },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2Island(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2Island");
  // <mt>

  // register member methods
  dub::fregister(L, b2Island_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2Island");
  // <mt>
  return 1;
}
