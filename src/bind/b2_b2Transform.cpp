/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2Transform
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** ~b2Transform()
 * 
 */
static int b2Transform__b2Transform(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "b2.b2Transform"));
    if (userdata->gc) {
      b2Transform *self = (b2Transform *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Set attributes (key, value)
 * 
 */
static int b2Transform__set_(lua_State *L) {

  b2Transform *self = *((b2Transform **)dub::checksdata_n(L, 1, "b2.b2Transform"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "p")) break;
      self->p = **((b2Vec2 **)dub::checksdata_n(L, 3, "b2.b2Vec2"));
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "q")) break;
      self->q = **((b2Rot **)dub::checksdata_n(L, 3, "b2.b2Rot"));
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2Transform__get_(lua_State *L) {

  b2Transform *self = *((b2Transform **)dub::checksdata_n(L, 1, "b2.b2Transform", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "p")) break;
      dub::pushudata(L, &self->p, "b2.b2Vec2", false);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "q")) break;
      dub::pushudata(L, &self->q, "b2.b2Rot", false);
      return 1;
    }
  }
  return 0;
}

/** b2Transform::b2Transform()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:353
 */
static int b2Transform_b2Transform(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      b2Vec2 *position = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
      b2Rot *rotation = *((b2Rot **)dub::checksdata(L, 2, "b2.b2Rot"));
      b2Transform *retval__ = new b2Transform(*position, *rotation);
      dub::pushudata(L, retval__, "b2.b2Transform", true);
      return 1;
    } else {
      b2Transform *retval__ = new b2Transform();
      dub::pushudata(L, retval__, "b2.b2Transform", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Transform::SetIdentity()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:359
 */
static int b2Transform_SetIdentity(lua_State *L) {
  try {
    b2Transform *self = *((b2Transform **)dub::checksdata(L, 1, "b2.b2Transform"));
    self->SetIdentity();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetIdentity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetIdentity: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Transform::Set(const b2Vec2 &position, float32 angle)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:366
 */
static int b2Transform_Set(lua_State *L) {
  try {
    b2Transform *self = *((b2Transform **)dub::checksdata(L, 1, "b2.b2Transform"));
    b2Vec2 *position = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    float32 angle = dub::checknumber(L, 3);
    self->Set(*position, angle);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Set: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2Transform___tostring(lua_State *L) {
  b2Transform *self = *((b2Transform **)dub::checksdata_n(L, 1, "b2.b2Transform"));
  lua_pushfstring(L, "b2.b2Transform: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2Transform_member_methods[] = {
  { "__gc"         , b2Transform__b2Transform },
  { "__newindex"   , b2Transform__set_    },
  { "__index"      , b2Transform__get_    },
  { "new"          , b2Transform_b2Transform },
  { "SetIdentity"  , b2Transform_SetIdentity },
  { "Set"          , b2Transform_Set      },
  { "__tostring"   , b2Transform___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2Transform(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2Transform");
  // <mt>

  // register member methods
  dub::fregister(L, b2Transform_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2Transform");
  // <mt>
  return 1;
}
