/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2PrismaticJoint
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** ~b2PrismaticJoint()
 * 
 */
static int b2PrismaticJoint__b2PrismaticJoint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "b2.b2PrismaticJoint"));
    if (userdata->gc) {
      b2PrismaticJoint *self = (b2PrismaticJoint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Cast (class_name)
 * 
 */
static int b2PrismaticJoint__cast_(lua_State *L) {

  b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata_n(L, 1, "b2.b2PrismaticJoint"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "b2.b2Joint")) break;
      *retval__ = static_cast<b2Joint *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2Vec2 b2PrismaticJoint::GetAnchorA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:89
 */
static int b2PrismaticJoint_GetAnchorA(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    dub::pushudata(L, new b2Vec2(self->GetAnchorA()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorA: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2PrismaticJoint::GetAnchorB() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:90
 */
static int b2PrismaticJoint_GetAnchorB(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    dub::pushudata(L, new b2Vec2(self->GetAnchorB()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorB: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2PrismaticJoint::GetReactionForce(float32 inv_dt) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:92
 */
static int b2PrismaticJoint_GetReactionForce(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    float32 inv_dt = dub::checknumber(L, 2);
    dub::pushudata(L, new b2Vec2(self->GetReactionForce(inv_dt)), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionForce: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PrismaticJoint::GetReactionTorque(float32 inv_dt) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:93
 */
static int b2PrismaticJoint_GetReactionTorque(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    float32 inv_dt = dub::checknumber(L, 2);
    lua_pushnumber(L, self->GetReactionTorque(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionTorque: Unknown exception");
  }
  return dub::error(L);
}

/** const b2Vec2& b2PrismaticJoint::GetLocalAnchorA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:96
 */
static int b2PrismaticJoint_GetLocalAnchorA(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    dub::pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAnchorA()), "b2.b2Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAnchorA: Unknown exception");
  }
  return dub::error(L);
}

/** const b2Vec2& b2PrismaticJoint::GetLocalAnchorB() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:99
 */
static int b2PrismaticJoint_GetLocalAnchorB(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    dub::pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAnchorB()), "b2.b2Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAnchorB: Unknown exception");
  }
  return dub::error(L);
}

/** const b2Vec2& b2PrismaticJoint::GetLocalAxisA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:102
 */
static int b2PrismaticJoint_GetLocalAxisA(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    dub::pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAxisA()), "b2.b2Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAxisA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAxisA: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PrismaticJoint::GetReferenceAngle() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:105
 */
static int b2PrismaticJoint_GetReferenceAngle(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushnumber(L, self->GetReferenceAngle());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReferenceAngle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReferenceAngle: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PrismaticJoint::GetJointTranslation() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:108
 */
static int b2PrismaticJoint_GetJointTranslation(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushnumber(L, self->GetJointTranslation());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetJointTranslation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetJointTranslation: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PrismaticJoint::GetJointSpeed() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:111
 */
static int b2PrismaticJoint_GetJointSpeed(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushnumber(L, self->GetJointSpeed());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetJointSpeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetJointSpeed: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2PrismaticJoint::IsLimitEnabled() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:114
 */
static int b2PrismaticJoint_IsLimitEnabled(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushboolean(L, self->IsLimitEnabled());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsLimitEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsLimitEnabled: Unknown exception");
  }
  return dub::error(L);
}

/** void b2PrismaticJoint::EnableLimit(bool flag)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:117
 */
static int b2PrismaticJoint_EnableLimit(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    bool flag = dub::checkboolean(L, 2);
    self->EnableLimit(flag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "EnableLimit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "EnableLimit: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PrismaticJoint::GetLowerLimit() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:120
 */
static int b2PrismaticJoint_GetLowerLimit(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushnumber(L, self->GetLowerLimit());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLowerLimit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLowerLimit: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PrismaticJoint::GetUpperLimit() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:123
 */
static int b2PrismaticJoint_GetUpperLimit(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushnumber(L, self->GetUpperLimit());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUpperLimit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUpperLimit: Unknown exception");
  }
  return dub::error(L);
}

/** void b2PrismaticJoint::SetLimits(float32 lower, float32 upper)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:126
 */
static int b2PrismaticJoint_SetLimits(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    float32 lower = dub::checknumber(L, 2);
    float32 upper = dub::checknumber(L, 3);
    self->SetLimits(lower, upper);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetLimits: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetLimits: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2PrismaticJoint::IsMotorEnabled() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:129
 */
static int b2PrismaticJoint_IsMotorEnabled(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushboolean(L, self->IsMotorEnabled());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsMotorEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsMotorEnabled: Unknown exception");
  }
  return dub::error(L);
}

/** void b2PrismaticJoint::EnableMotor(bool flag)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:132
 */
static int b2PrismaticJoint_EnableMotor(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    bool flag = dub::checkboolean(L, 2);
    self->EnableMotor(flag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "EnableMotor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "EnableMotor: Unknown exception");
  }
  return dub::error(L);
}

/** void b2PrismaticJoint::SetMotorSpeed(float32 speed)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:135
 */
static int b2PrismaticJoint_SetMotorSpeed(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    float32 speed = dub::checknumber(L, 2);
    self->SetMotorSpeed(speed);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetMotorSpeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetMotorSpeed: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PrismaticJoint::GetMotorSpeed() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:138
 */
static int b2PrismaticJoint_GetMotorSpeed(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushnumber(L, self->GetMotorSpeed());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMotorSpeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMotorSpeed: Unknown exception");
  }
  return dub::error(L);
}

/** void b2PrismaticJoint::SetMaxMotorForce(float32 force)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:141
 */
static int b2PrismaticJoint_SetMaxMotorForce(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    float32 force = dub::checknumber(L, 2);
    self->SetMaxMotorForce(force);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetMaxMotorForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetMaxMotorForce: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PrismaticJoint::GetMaxMotorForce() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:142
 */
static int b2PrismaticJoint_GetMaxMotorForce(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushnumber(L, self->GetMaxMotorForce());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMaxMotorForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMaxMotorForce: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2PrismaticJoint::GetMotorForce(float32 inv_dt) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:145
 */
static int b2PrismaticJoint_GetMotorForce(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    float32 inv_dt = dub::checknumber(L, 2);
    lua_pushnumber(L, self->GetMotorForce(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMotorForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMotorForce: Unknown exception");
  }
  return dub::error(L);
}

/** void b2PrismaticJoint::Dump()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.h:148
 */
static int b2PrismaticJoint_Dump(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    self->Dump();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dump: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dump: Unknown exception");
  }
  return dub::error(L);
}

/** b2JointType b2Joint::GetType() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:108
 */
static int b2PrismaticJoint_GetType(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushnumber(L, self->GetType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetType: Unknown exception");
  }
  return dub::error(L);
}

/** b2Body * b2Joint::GetBodyA()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:111
 */
static int b2PrismaticJoint_GetBodyA(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    b2Body *retval__ = self->GetBodyA();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyA: Unknown exception");
  }
  return dub::error(L);
}

/** b2Body * b2Joint::GetBodyB()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:114
 */
static int b2PrismaticJoint_GetBodyB(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    b2Body *retval__ = self->GetBodyB();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyB: Unknown exception");
  }
  return dub::error(L);
}

/** b2Joint * b2Joint::GetNext()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:129
 */
static int b2PrismaticJoint_GetNext(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    b2Joint *retval__ = self->GetNext();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetNext: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetNext: Unknown exception");
  }
  return dub::error(L);
}

/** void * b2Joint::GetUserData() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:133
 */
static int b2PrismaticJoint_GetUserData(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    self->GetUserData();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUserData: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Joint::SetUserData(void *data)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:136
 */
static int b2PrismaticJoint_SetUserData(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    void *data = *((void **)dub::checksdata(L, 2, "void"));
    self->SetUserData(data);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetUserData: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2Joint::IsActive() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:139
 */
static int b2PrismaticJoint_IsActive(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushboolean(L, self->IsActive());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsActive: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsActive: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2Joint::GetCollideConnected() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:144
 */
static int b2PrismaticJoint_GetCollideConnected(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    lua_pushboolean(L, self->GetCollideConnected());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCollideConnected: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCollideConnected: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void b2Joint::ShiftOrigin(const b2Vec2 &newOrigin)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:150
 */
static int b2PrismaticJoint_ShiftOrigin(lua_State *L) {
  try {
    b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata(L, 1, "b2.b2PrismaticJoint"));
    b2Vec2 *newOrigin = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    self->ShiftOrigin(*newOrigin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShiftOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShiftOrigin: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2PrismaticJoint___tostring(lua_State *L) {
  b2PrismaticJoint *self = *((b2PrismaticJoint **)dub::checksdata_n(L, 1, "b2.b2PrismaticJoint"));
  lua_pushfstring(L, "b2.b2PrismaticJoint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2PrismaticJoint_member_methods[] = {
  { "__gc"         , b2PrismaticJoint__b2PrismaticJoint },
  { "_cast_"       , b2PrismaticJoint__cast_ },
  { "GetAnchorA"   , b2PrismaticJoint_GetAnchorA },
  { "GetAnchorB"   , b2PrismaticJoint_GetAnchorB },
  { "GetReactionForce", b2PrismaticJoint_GetReactionForce },
  { "GetReactionTorque", b2PrismaticJoint_GetReactionTorque },
  { "GetLocalAnchorA", b2PrismaticJoint_GetLocalAnchorA },
  { "GetLocalAnchorB", b2PrismaticJoint_GetLocalAnchorB },
  { "GetLocalAxisA", b2PrismaticJoint_GetLocalAxisA },
  { "GetReferenceAngle", b2PrismaticJoint_GetReferenceAngle },
  { "GetJointTranslation", b2PrismaticJoint_GetJointTranslation },
  { "GetJointSpeed", b2PrismaticJoint_GetJointSpeed },
  { "IsLimitEnabled", b2PrismaticJoint_IsLimitEnabled },
  { "EnableLimit"  , b2PrismaticJoint_EnableLimit },
  { "GetLowerLimit", b2PrismaticJoint_GetLowerLimit },
  { "GetUpperLimit", b2PrismaticJoint_GetUpperLimit },
  { "SetLimits"    , b2PrismaticJoint_SetLimits },
  { "IsMotorEnabled", b2PrismaticJoint_IsMotorEnabled },
  { "EnableMotor"  , b2PrismaticJoint_EnableMotor },
  { "SetMotorSpeed", b2PrismaticJoint_SetMotorSpeed },
  { "GetMotorSpeed", b2PrismaticJoint_GetMotorSpeed },
  { "SetMaxMotorForce", b2PrismaticJoint_SetMaxMotorForce },
  { "GetMaxMotorForce", b2PrismaticJoint_GetMaxMotorForce },
  { "GetMotorForce", b2PrismaticJoint_GetMotorForce },
  { "Dump"         , b2PrismaticJoint_Dump },
  { "GetType"      , b2PrismaticJoint_GetType },
  { "GetBodyA"     , b2PrismaticJoint_GetBodyA },
  { "GetBodyB"     , b2PrismaticJoint_GetBodyB },
  { "GetNext"      , b2PrismaticJoint_GetNext },
  { "GetUserData"  , b2PrismaticJoint_GetUserData },
  { "SetUserData"  , b2PrismaticJoint_SetUserData },
  { "IsActive"     , b2PrismaticJoint_IsActive },
  { "GetCollideConnected", b2PrismaticJoint_GetCollideConnected },
  { "ShiftOrigin"  , b2PrismaticJoint_ShiftOrigin },
  { "__tostring"   , b2PrismaticJoint___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2PrismaticJoint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2PrismaticJoint");
  // <mt>

  // register member methods
  dub::fregister(L, b2PrismaticJoint_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2PrismaticJoint");
  // <mt>
  return 1;
}
