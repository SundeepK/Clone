/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for library b2
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>
#include <Box2D/Box2D.h>


extern "C" {
int luaopen_b2_b2BlockAllocator(lua_State *L);
int luaopen_b2_b2BodyDef(lua_State *L);
int luaopen_b2_b2Body(lua_State *L);
int luaopen_b2_b2Pair(lua_State *L);
int luaopen_b2_b2BroadPhase(lua_State *L);
int luaopen_b2_b2ChainShape(lua_State *L);
int luaopen_b2_b2CircleShape(lua_State *L);
int luaopen_b2_b2ContactFeature(lua_State *L);
int luaopen_b2_b2ContactID(lua_State *L);
int luaopen_b2_b2ManifoldPoint(lua_State *L);
int luaopen_b2_b2Manifold(lua_State *L);
int luaopen_b2_b2WorldManifold(lua_State *L);
int luaopen_b2_b2ClipVertex(lua_State *L);
int luaopen_b2_b2RayCastInput(lua_State *L);
int luaopen_b2_b2RayCastOutput(lua_State *L);
int luaopen_b2_b2AABB(lua_State *L);
int luaopen_b2_b2ContactManager(lua_State *L);
int luaopen_b2_b2DistanceProxy(lua_State *L);
int luaopen_b2_b2SimplexCache(lua_State *L);
int luaopen_b2_b2DistanceInput(lua_State *L);
int luaopen_b2_b2DistanceOutput(lua_State *L);
int luaopen_b2_b2DistanceJointDef(lua_State *L);
int luaopen_b2_b2DistanceJoint(lua_State *L);
int luaopen_b2_b2Color(lua_State *L);
int luaopen_b2_b2Draw(lua_State *L);
int luaopen_b2_b2TreeNode(lua_State *L);
int luaopen_b2_b2DynamicTree(lua_State *L);
int luaopen_b2_b2EdgeShape(lua_State *L);
int luaopen_b2_b2Filter(lua_State *L);
int luaopen_b2_b2FixtureDef(lua_State *L);
int luaopen_b2_b2FixtureProxy(lua_State *L);
int luaopen_b2_b2Fixture(lua_State *L);
int luaopen_b2_b2FrictionJointDef(lua_State *L);
int luaopen_b2_b2FrictionJoint(lua_State *L);
int luaopen_b2_b2GearJointDef(lua_State *L);
int luaopen_b2_b2GearJoint(lua_State *L);
int luaopen_b2_b2Island(lua_State *L);
int luaopen_b2_b2Jacobian(lua_State *L);
int luaopen_b2_b2JointEdge(lua_State *L);
int luaopen_b2_b2JointDef(lua_State *L);
int luaopen_b2_b2Joint(lua_State *L);
int luaopen_b2_b2Vec2(lua_State *L);
int luaopen_b2_b2Vec3(lua_State *L);
int luaopen_b2_b2Mat22(lua_State *L);
int luaopen_b2_b2Mat33(lua_State *L);
int luaopen_b2_b2Rot(lua_State *L);
int luaopen_b2_b2Transform(lua_State *L);
int luaopen_b2_b2Sweep(lua_State *L);
int luaopen_b2_b2MotorJointDef(lua_State *L);
int luaopen_b2_b2MotorJoint(lua_State *L);
int luaopen_b2_b2MouseJointDef(lua_State *L);
int luaopen_b2_b2MouseJoint(lua_State *L);
int luaopen_b2_b2PolygonShape(lua_State *L);
int luaopen_b2_b2PrismaticJointDef(lua_State *L);
int luaopen_b2_b2PrismaticJoint(lua_State *L);
int luaopen_b2_b2PulleyJointDef(lua_State *L);
int luaopen_b2_b2PulleyJoint(lua_State *L);
int luaopen_b2_b2RevoluteJointDef(lua_State *L);
int luaopen_b2_b2RevoluteJoint(lua_State *L);
int luaopen_b2_b2RopeDef(lua_State *L);
int luaopen_b2_b2Rope(lua_State *L);
int luaopen_b2_b2RopeJointDef(lua_State *L);
int luaopen_b2_b2RopeJoint(lua_State *L);
int luaopen_b2_b2Version(lua_State *L);
int luaopen_b2_b2MassData(lua_State *L);
int luaopen_b2_b2Shape(lua_State *L);
int luaopen_b2_b2StackEntry(lua_State *L);
int luaopen_b2_b2StackAllocator(lua_State *L);
int luaopen_b2_b2Timer(lua_State *L);
int luaopen_b2_b2TOIInput(lua_State *L);
int luaopen_b2_b2TOIOutput(lua_State *L);
int luaopen_b2_b2Profile(lua_State *L);
int luaopen_b2_b2TimeStep(lua_State *L);
int luaopen_b2_b2Position(lua_State *L);
int luaopen_b2_b2Velocity(lua_State *L);
int luaopen_b2_b2SolverData(lua_State *L);
int luaopen_b2_b2WeldJointDef(lua_State *L);
int luaopen_b2_b2WeldJoint(lua_State *L);
int luaopen_b2_b2WheelJointDef(lua_State *L);
int luaopen_b2_b2WheelJoint(lua_State *L);
int luaopen_b2_b2World(lua_State *L);
int luaopen_b2_b2DestructionListener(lua_State *L);
int luaopen_b2_b2ContactFilter(lua_State *L);
int luaopen_b2_b2ContactImpulse(lua_State *L);
int luaopen_b2_b2ContactListener(lua_State *L);
int luaopen_b2_b2QueryCallback(lua_State *L);
int luaopen_b2_b2RayCastCallback(lua_State *L);
}

/** bool b2PairLessThan(const b2Pair &pair1, const b2Pair &pair2)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2BroadPhase.h:132
 */
static int b2_b2PairLessThan(lua_State *L) {
  try {
    b2Pair *pair1 = *((b2Pair **)dub::checksdata(L, 1, "b2.b2Pair"));
    b2Pair *pair2 = *((b2Pair **)dub::checksdata(L, 2, "b2.b2Pair"));
    lua_pushboolean(L, b2PairLessThan(*pair1, *pair2));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2PairLessThan: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2PairLessThan: Unknown exception");
  }
  return lua_error(L);
}

/** void b2CollideCircles(b2Manifold *manifold, const b2CircleShape *circleA, const b2Transform &xfA, const b2CircleShape *circleB, const b2Transform &xfB)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:219
 */
static int b2_b2CollideCircles(lua_State *L) {
  try {
    b2Manifold *manifold = *((b2Manifold **)dub::checksdata(L, 1, "b2.b2Manifold"));
    b2CircleShape *circleA = *((b2CircleShape **)dub::checksdata(L, 2, "b2.b2CircleShape"));
    b2Transform *xfA = *((b2Transform **)dub::checksdata(L, 3, "b2.b2Transform"));
    b2CircleShape *circleB = *((b2CircleShape **)dub::checksdata(L, 4, "b2.b2CircleShape"));
    b2Transform *xfB = *((b2Transform **)dub::checksdata(L, 5, "b2.b2Transform"));
    b2CollideCircles(manifold, circleA, *xfA, circleB, *xfB);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2CollideCircles: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2CollideCircles: Unknown exception");
  }
  return lua_error(L);
}

/** void b2CollidePolygonAndCircle(b2Manifold *manifold, const b2PolygonShape *polygonA, const b2Transform &xfA, const b2CircleShape *circleB, const b2Transform &xfB)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:224
 */
static int b2_b2CollidePolygonAndCircle(lua_State *L) {
  try {
    b2Manifold *manifold = *((b2Manifold **)dub::checksdata(L, 1, "b2.b2Manifold"));
    b2PolygonShape *polygonA = *((b2PolygonShape **)dub::checksdata(L, 2, "b2.b2PolygonShape"));
    b2Transform *xfA = *((b2Transform **)dub::checksdata(L, 3, "b2.b2Transform"));
    b2CircleShape *circleB = *((b2CircleShape **)dub::checksdata(L, 4, "b2.b2CircleShape"));
    b2Transform *xfB = *((b2Transform **)dub::checksdata(L, 5, "b2.b2Transform"));
    b2CollidePolygonAndCircle(manifold, polygonA, *xfA, circleB, *xfB);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2CollidePolygonAndCircle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2CollidePolygonAndCircle: Unknown exception");
  }
  return lua_error(L);
}

/** void b2CollidePolygons(b2Manifold *manifold, const b2PolygonShape *polygonA, const b2Transform &xfA, const b2PolygonShape *polygonB, const b2Transform &xfB)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:229
 */
static int b2_b2CollidePolygons(lua_State *L) {
  try {
    b2Manifold *manifold = *((b2Manifold **)dub::checksdata(L, 1, "b2.b2Manifold"));
    b2PolygonShape *polygonA = *((b2PolygonShape **)dub::checksdata(L, 2, "b2.b2PolygonShape"));
    b2Transform *xfA = *((b2Transform **)dub::checksdata(L, 3, "b2.b2Transform"));
    b2PolygonShape *polygonB = *((b2PolygonShape **)dub::checksdata(L, 4, "b2.b2PolygonShape"));
    b2Transform *xfB = *((b2Transform **)dub::checksdata(L, 5, "b2.b2Transform"));
    b2CollidePolygons(manifold, polygonA, *xfA, polygonB, *xfB);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2CollidePolygons: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2CollidePolygons: Unknown exception");
  }
  return lua_error(L);
}

/** void b2CollideEdgeAndCircle(b2Manifold *manifold, const b2EdgeShape *polygonA, const b2Transform &xfA, const b2CircleShape *circleB, const b2Transform &xfB)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:234
 */
static int b2_b2CollideEdgeAndCircle(lua_State *L) {
  try {
    b2Manifold *manifold = *((b2Manifold **)dub::checksdata(L, 1, "b2.b2Manifold"));
    b2EdgeShape *polygonA = *((b2EdgeShape **)dub::checksdata(L, 2, "b2.b2EdgeShape"));
    b2Transform *xfA = *((b2Transform **)dub::checksdata(L, 3, "b2.b2Transform"));
    b2CircleShape *circleB = *((b2CircleShape **)dub::checksdata(L, 4, "b2.b2CircleShape"));
    b2Transform *xfB = *((b2Transform **)dub::checksdata(L, 5, "b2.b2Transform"));
    b2CollideEdgeAndCircle(manifold, polygonA, *xfA, circleB, *xfB);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2CollideEdgeAndCircle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2CollideEdgeAndCircle: Unknown exception");
  }
  return lua_error(L);
}

/** void b2CollideEdgeAndPolygon(b2Manifold *manifold, const b2EdgeShape *edgeA, const b2Transform &xfA, const b2PolygonShape *circleB, const b2Transform &xfB)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:239
 */
static int b2_b2CollideEdgeAndPolygon(lua_State *L) {
  try {
    b2Manifold *manifold = *((b2Manifold **)dub::checksdata(L, 1, "b2.b2Manifold"));
    b2EdgeShape *edgeA = *((b2EdgeShape **)dub::checksdata(L, 2, "b2.b2EdgeShape"));
    b2Transform *xfA = *((b2Transform **)dub::checksdata(L, 3, "b2.b2Transform"));
    b2PolygonShape *circleB = *((b2PolygonShape **)dub::checksdata(L, 4, "b2.b2PolygonShape"));
    b2Transform *xfB = *((b2Transform **)dub::checksdata(L, 5, "b2.b2Transform"));
    b2CollideEdgeAndPolygon(manifold, edgeA, *xfA, circleB, *xfB);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2CollideEdgeAndPolygon: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2CollideEdgeAndPolygon: Unknown exception");
  }
  return lua_error(L);
}

/** bool b2TestOverlap(const b2Shape *shapeA, int32 indexA, const b2Shape *shapeB, int32 indexB, const b2Transform &xfA, const b2Transform &xfB)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:248
 */
static int b2_b2TestOverlap(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      b2Shape *shapeA = *((b2Shape **)dub::checksdata(L, 1, "b2.b2Shape"));
      int32 indexA = dub::checkint(L, 2);
      b2Shape *shapeB = *((b2Shape **)dub::checksdata(L, 3, "b2.b2Shape"));
      int32 indexB = dub::checkint(L, 4);
      b2Transform *xfA = *((b2Transform **)dub::checksdata(L, 5, "b2.b2Transform"));
      b2Transform *xfB = *((b2Transform **)dub::checksdata(L, 6, "b2.b2Transform"));
      lua_pushboolean(L, b2TestOverlap(shapeA, indexA, shapeB, indexB, *xfA, *xfB));
      return 1;
    } else {
      b2AABB *a = *((b2AABB **)dub::checksdata(L, 1, "b2.b2AABB"));
      b2AABB *b = *((b2AABB **)dub::checksdata(L, 2, "b2.b2AABB"));
      lua_pushboolean(L, b2TestOverlap(*a, *b));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2TestOverlap: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2TestOverlap: Unknown exception");
  }
  return lua_error(L);
}

/** void b2Distance(b2DistanceOutput *output, b2SimplexCache *cache, const b2DistanceInput *input)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Distance.h:89
 */
static int b2_b2Distance(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      b2DistanceOutput *output = *((b2DistanceOutput **)dub::checksdata(L, 1, "b2.b2DistanceOutput"));
      b2SimplexCache *cache = *((b2SimplexCache **)dub::checksdata(L, 2, "b2.b2SimplexCache"));
      b2DistanceInput *input = *((b2DistanceInput **)dub::checksdata(L, 3, "b2.b2DistanceInput"));
      b2Distance(output, cache, input);
      return 0;
    } else {
      b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
      b2Vec2 *b = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
      lua_pushnumber(L, b2Distance(*a, *b));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2Distance: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2Distance: Unknown exception");
  }
  return lua_error(L);
}

/** bool b2IsValid(float32 x)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:26
 */
static int b2_b2IsValid(lua_State *L) {
  try {
    float32 x = dub::checknumber(L, 1);
    lua_pushboolean(L, b2IsValid(x));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2IsValid: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2IsValid: Unknown exception");
  }
  return lua_error(L);
}

/** float32 b2InvSqrt(float32 x)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:33
 */
static int b2_b2InvSqrt(lua_State *L) {
  try {
    float32 x = dub::checknumber(L, 1);
    lua_pushnumber(L, b2InvSqrt(x));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2InvSqrt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2InvSqrt: Unknown exception");
  }
  return lua_error(L);
}

/** float32 b2Dot(const b2Vec2 &a, const b2Vec2 &b)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:406
 */
static int b2_b2Dot(lua_State *L) {
  try {
    int type__ = lua_type(L, 1);
    void **ptr1__;
    if ( (ptr1__ = dub::issdata(L, 1, "b2.b2Vec3", type__)) ) {
      b2Vec3 *a = *((b2Vec3 **)ptr1__);
      b2Vec3 *b = *((b2Vec3 **)dub::checksdata(L, 2, "b2.b2Vec3"));
      lua_pushnumber(L, b2Dot(*a, *b));
      return 1;
    } else {
      b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
      b2Vec2 *b = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
      lua_pushnumber(L, b2Dot(*a, *b));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2Dot: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2Dot: Unknown exception");
  }
  return lua_error(L);
}

/** float32 b2Cross(const b2Vec2 &a, const b2Vec2 &b)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:412
 */
static int b2_b2Cross(lua_State *L) {
  try {
    int type__ = lua_type(L, 1);
    void **ptr1__;
    if (type__ == LUA_TNUMBER) {
      float32 s = dub::checknumber(L, 1);
      b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
      dub::pushudata(L, new b2Vec2(b2Cross(s, *a)), "b2.b2Vec2", true);
      return 1;
    } else if ( (ptr1__ = dub::issdata(L, 1, "b2.b2Vec3", type__)) ) {
      b2Vec3 *a = *((b2Vec3 **)ptr1__);
      b2Vec3 *b = *((b2Vec3 **)dub::checksdata(L, 2, "b2.b2Vec3"));
      dub::pushudata(L, new b2Vec3(b2Cross(*a, *b)), "b2.b2Vec3", true);
      return 1;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
        float32 s = dub::checknumber(L, 2);
        dub::pushudata(L, new b2Vec2(b2Cross(*a, s)), "b2.b2Vec2", true);
        return 1;
      } else {
        b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
        b2Vec2 *b = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
        lua_pushnumber(L, b2Cross(*a, *b));
        return 1;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2Cross: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2Cross: Unknown exception");
  }
  return lua_error(L);
}

/** b2Vec2 b2Mul(const b2Mat22 &A, const b2Vec2 &v)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:433
 */
static int b2_b2Mul(lua_State *L) {
  try {
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub::issdata(L, 2, "b2.b2Vec2", type__)) ) {
      int type__ = lua_type(L, 1);
      void **ptr1__;
      if ( (ptr1__ = dub::issdata(L, 1, "b2.b2Transform", type__)) ) {
        b2Transform *T = *((b2Transform **)ptr1__);
        b2Vec2 *v = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
        dub::pushudata(L, new b2Vec2(b2Mul(*T, *v)), "b2.b2Vec2", true);
        return 1;
      } else if ( (ptr1__ = dub::issdata(L, 1, "b2.b2Mat22", type__)) ) {
        b2Mat22 *A = *((b2Mat22 **)ptr1__);
        b2Vec2 *v = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
        dub::pushudata(L, new b2Vec2(b2Mul(*A, *v)), "b2.b2Vec2", true);
        return 1;
      } else {
        b2Rot *q = *((b2Rot **)dub::checksdata(L, 1, "b2.b2Rot"));
        b2Vec2 *v = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
        dub::pushudata(L, new b2Vec2(b2Mul(*q, *v)), "b2.b2Vec2", true);
        return 1;
      }
    } else if ( (ptr2__ = dub::issdata(L, 2, "b2.b2Rot", type__)) ) {
      b2Rot *q = *((b2Rot **)dub::checksdata(L, 1, "b2.b2Rot"));
      b2Rot *r = *((b2Rot **)ptr2__);
      dub::pushudata(L, new b2Rot(b2Mul(*q, *r)), "b2.b2Rot", true);
      return 1;
    } else if ( (ptr2__ = dub::issdata(L, 2, "b2.b2Transform", type__)) ) {
      b2Transform *A = *((b2Transform **)dub::checksdata(L, 1, "b2.b2Transform"));
      b2Transform *B = *((b2Transform **)ptr2__);
      dub::pushudata(L, new b2Transform(b2Mul(*A, *B)), "b2.b2Transform", true);
      return 1;
    } else if ( (ptr2__ = dub::issdata(L, 2, "b2.b2Mat22", type__)) ) {
      b2Mat22 *A = *((b2Mat22 **)dub::checksdata(L, 1, "b2.b2Mat22"));
      b2Mat22 *B = *((b2Mat22 **)ptr2__);
      dub::pushudata(L, new b2Mat22(b2Mul(*A, *B)), "b2.b2Mat22", true);
      return 1;
    } else {
      b2Mat33 *A = *((b2Mat33 **)dub::checksdata(L, 1, "b2.b2Mat33"));
      b2Vec3 *v = *((b2Vec3 **)dub::checksdata(L, 2, "b2.b2Vec3"));
      dub::pushudata(L, new b2Vec3(b2Mul(*A, *v)), "b2.b2Vec3", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2Mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2Mul: Unknown exception");
  }
  return lua_error(L);
}

/** b2Vec2 b2MulT(const b2Mat22 &A, const b2Vec2 &v)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:440
 */
static int b2_b2MulT(lua_State *L) {
  try {
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub::issdata(L, 2, "b2.b2Rot", type__)) ) {
      b2Rot *q = *((b2Rot **)dub::checksdata(L, 1, "b2.b2Rot"));
      b2Rot *r = *((b2Rot **)ptr2__);
      dub::pushudata(L, new b2Rot(b2MulT(*q, *r)), "b2.b2Rot", true);
      return 1;
    } else if ( (ptr2__ = dub::issdata(L, 2, "b2.b2Transform", type__)) ) {
      b2Transform *A = *((b2Transform **)dub::checksdata(L, 1, "b2.b2Transform"));
      b2Transform *B = *((b2Transform **)ptr2__);
      dub::pushudata(L, new b2Transform(b2MulT(*A, *B)), "b2.b2Transform", true);
      return 1;
    } else if ( (ptr2__ = dub::issdata(L, 2, "b2.b2Mat22", type__)) ) {
      b2Mat22 *A = *((b2Mat22 **)dub::checksdata(L, 1, "b2.b2Mat22"));
      b2Mat22 *B = *((b2Mat22 **)ptr2__);
      dub::pushudata(L, new b2Mat22(b2MulT(*A, *B)), "b2.b2Mat22", true);
      return 1;
    } else {
      int type__ = lua_type(L, 1);
      void **ptr1__;
      if ( (ptr1__ = dub::issdata(L, 1, "b2.b2Transform", type__)) ) {
        b2Transform *T = *((b2Transform **)ptr1__);
        b2Vec2 *v = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
        dub::pushudata(L, new b2Vec2(b2MulT(*T, *v)), "b2.b2Vec2", true);
        return 1;
      } else if ( (ptr1__ = dub::issdata(L, 1, "b2.b2Mat22", type__)) ) {
        b2Mat22 *A = *((b2Mat22 **)ptr1__);
        b2Vec2 *v = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
        dub::pushudata(L, new b2Vec2(b2MulT(*A, *v)), "b2.b2Vec2", true);
        return 1;
      } else {
        b2Rot *q = *((b2Rot **)dub::checksdata(L, 1, "b2.b2Rot"));
        b2Vec2 *v = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
        dub::pushudata(L, new b2Vec2(b2MulT(*q, *v)), "b2.b2Vec2", true);
        return 1;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2MulT: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2MulT: Unknown exception");
  }
  return lua_error(L);
}

/** b2Vec2 operator+(const b2Vec2 &a, const b2Vec2 &b)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:446
 */
static int b2_operator_add(lua_State *L) {
  try {
    int type__ = lua_type(L, 1);
    void **ptr1__;
    if ( (ptr1__ = dub::issdata(L, 1, "b2.b2Vec3", type__)) ) {
      b2Vec3 *a = *((b2Vec3 **)ptr1__);
      b2Vec3 *b = *((b2Vec3 **)dub::checksdata(L, 2, "b2.b2Vec3"));
      dub::pushudata(L, new b2Vec3(operator+(*a, *b)), "b2.b2Vec3", true);
      return 1;
    } else if ( (ptr1__ = dub::issdata(L, 1, "b2.b2Mat22", type__)) ) {
      b2Mat22 *A = *((b2Mat22 **)ptr1__);
      b2Mat22 *B = *((b2Mat22 **)dub::checksdata(L, 2, "b2.b2Mat22"));
      dub::pushudata(L, new b2Mat22(operator+(*A, *B)), "b2.b2Mat22", true);
      return 1;
    } else {
      b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
      b2Vec2 *b = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
      dub::pushudata(L, new b2Vec2(operator+(*a, *b)), "b2.b2Vec2", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.operator+: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.operator+: Unknown exception");
  }
  return lua_error(L);
}

/** b2Vec2 operator-(const b2Vec2 &a, const b2Vec2 &b)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:452
 */
static int b2_operator_sub(lua_State *L) {
  try {
    int type__ = lua_type(L, 1);
    void **ptr1__;
    if ( (ptr1__ = dub::issdata(L, 1, "b2.b2Vec3", type__)) ) {
      b2Vec3 *a = *((b2Vec3 **)ptr1__);
      b2Vec3 *b = *((b2Vec3 **)dub::checksdata(L, 2, "b2.b2Vec3"));
      dub::pushudata(L, new b2Vec3(operator-(*a, *b)), "b2.b2Vec3", true);
      return 1;
    } else {
      b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
      b2Vec2 *b = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
      dub::pushudata(L, new b2Vec2(operator-(*a, *b)), "b2.b2Vec2", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.operator-: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.operator-: Unknown exception");
  }
  return lua_error(L);
}

/** b2Vec2 operator*(float32 s, const b2Vec2 &a)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:457
 */
static int b2_operator_mul(lua_State *L) {
  try {
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub::issdata(L, 2, "b2.b2Vec3", type__)) ) {
      float32 s = dub::checknumber(L, 1);
      b2Vec3 *a = *((b2Vec3 **)ptr2__);
      dub::pushudata(L, new b2Vec3(operator*(s, *a)), "b2.b2Vec3", true);
      return 1;
    } else {
      float32 s = dub::checknumber(L, 1);
      b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
      dub::pushudata(L, new b2Vec2(operator*(s, *a)), "b2.b2Vec2", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.operator*: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.operator*: Unknown exception");
  }
  return lua_error(L);
}

/** bool operator==(const b2Vec2 &a, const b2Vec2 &b)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:462
 */
static int b2_operator_eq(lua_State *L) {
  try {
    b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
    b2Vec2 *b = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    lua_pushboolean(L, operator==(*a, *b));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.operator==: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.operator==: Unknown exception");
  }
  return lua_error(L);
}

/** float32 b2DistanceSquared(const b2Vec2 &a, const b2Vec2 &b)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:473
 */
static int b2_b2DistanceSquared(lua_State *L) {
  try {
    b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
    b2Vec2 *b = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    lua_pushnumber(L, b2DistanceSquared(*a, *b));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2DistanceSquared: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2DistanceSquared: Unknown exception");
  }
  return lua_error(L);
}

/** b2Vec2 b2Mul22(const b2Mat33 &A, const b2Vec2 &v)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:534
 */
static int b2_b2Mul22(lua_State *L) {
  try {
    b2Mat33 *A = *((b2Mat33 **)dub::checksdata(L, 1, "b2.b2Mat33"));
    b2Vec2 *v = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    dub::pushudata(L, new b2Vec2(b2Mul22(*A, *v)), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2Mul22: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2Mul22: Unknown exception");
  }
  return lua_error(L);
}

/** b2Vec2 b2Abs(const b2Vec2 &a)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:621
 */
static int b2_b2Abs(lua_State *L) {
  try {
    int type__ = lua_type(L, 1);
    void **ptr1__;
    if ( (ptr1__ = dub::issdata(L, 1, "b2.b2Mat22", type__)) ) {
      b2Mat22 *A = *((b2Mat22 **)ptr1__);
      dub::pushudata(L, new b2Mat22(b2Abs(*A)), "b2.b2Mat22", true);
      return 1;
    } else {
      b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
      dub::pushudata(L, new b2Vec2(b2Abs(*a)), "b2.b2Vec2", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2Abs: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2Abs: Unknown exception");
  }
  return lua_error(L);
}

/** b2Vec2 b2Min(const b2Vec2 &a, const b2Vec2 &b)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:637
 */
static int b2_b2Min(lua_State *L) {
  try {
    b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
    b2Vec2 *b = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    dub::pushudata(L, new b2Vec2(b2Min(*a, *b)), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2Min: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2Min: Unknown exception");
  }
  return lua_error(L);
}

/** b2Vec2 b2Max(const b2Vec2 &a, const b2Vec2 &b)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:648
 */
static int b2_b2Max(lua_State *L) {
  try {
    b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
    b2Vec2 *b = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    dub::pushudata(L, new b2Vec2(b2Max(*a, *b)), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2Max: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2Max: Unknown exception");
  }
  return lua_error(L);
}

/** b2Vec2 b2Clamp(const b2Vec2 &a, const b2Vec2 &low, const b2Vec2 &high)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:659
 */
static int b2_b2Clamp(lua_State *L) {
  try {
    b2Vec2 *a = *((b2Vec2 **)dub::checksdata(L, 1, "b2.b2Vec2"));
    b2Vec2 *low = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    b2Vec2 *high = *((b2Vec2 **)dub::checksdata(L, 3, "b2.b2Vec2"));
    dub::pushudata(L, new b2Vec2(b2Clamp(*a, *low, *high)), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2Clamp: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2Clamp: Unknown exception");
  }
  return lua_error(L);
}

/** uint32 b2NextPowerOfTwo(uint32 x)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:676
 */
static int b2_b2NextPowerOfTwo(lua_State *L) {
  try {
    uint32 x = dub::checkint(L, 1);
    lua_pushnumber(L, b2NextPowerOfTwo(x));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2NextPowerOfTwo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2NextPowerOfTwo: Unknown exception");
  }
  return lua_error(L);
}

/** bool b2IsPowerOfTwo(uint32 x)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Math.h:686
 */
static int b2_b2IsPowerOfTwo(lua_State *L) {
  try {
    uint32 x = dub::checkint(L, 1);
    lua_pushboolean(L, b2IsPowerOfTwo(x));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2IsPowerOfTwo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2IsPowerOfTwo: Unknown exception");
  }
  return lua_error(L);
}

/** void* b2Alloc(int32 size)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Settings.h:131
 */
static int b2_b2Alloc(lua_State *L) {
  try {
    int32 size = dub::checkint(L, 1);
    b2Alloc(size);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2Alloc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2Alloc: Unknown exception");
  }
  return lua_error(L);
}

/** void b2Free(void *mem)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Settings.h:134
 */
static int b2_b2Free(lua_State *L) {
  try {
    void *mem = *((void **)dub::checksdata(L, 1, "void"));
    b2Free(mem);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2Free: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2Free: Unknown exception");
  }
  return lua_error(L);
}

/** void b2TimeOfImpact(b2TOIOutput *output, const b2TOIInput *input)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2TimeOfImpact.h:56
 */
static int b2_b2TimeOfImpact(lua_State *L) {
  try {
    b2TOIOutput *output = *((b2TOIOutput **)dub::checksdata(L, 1, "b2.b2TOIOutput"));
    b2TOIInput *input = *((b2TOIInput **)dub::checksdata(L, 2, "b2.b2TOIInput"));
    b2TimeOfImpact(output, input);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "b2.b2TimeOfImpact: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "b2.b2TimeOfImpact: Unknown exception");
  }
  return lua_error(L);
}

// --=============================================== FUNCTIONS
static const struct luaL_Reg b2_functions[] = {
  { "b2PairLessThan", b2_b2PairLessThan    },
  { "b2CollideCircles", b2_b2CollideCircles  },
  { "b2CollidePolygonAndCircle", b2_b2CollidePolygonAndCircle },
  { "b2CollidePolygons", b2_b2CollidePolygons },
  { "b2CollideEdgeAndCircle", b2_b2CollideEdgeAndCircle },
  { "b2CollideEdgeAndPolygon", b2_b2CollideEdgeAndPolygon },
  { "b2TestOverlap", b2_b2TestOverlap     },
  { "b2Distance"   , b2_b2Distance        },
  { "b2IsValid"    , b2_b2IsValid         },
  { "b2InvSqrt"    , b2_b2InvSqrt         },
  { "b2Dot"        , b2_b2Dot             },
  { "b2Cross"      , b2_b2Cross           },
  { "b2Mul"        , b2_b2Mul             },
  { "b2MulT"       , b2_b2MulT            },
  { "__add"        , b2_operator_add      },
  { "__sub"        , b2_operator_sub      },
  { "__mul"        , b2_operator_mul      },
  { "__eq"         , b2_operator_eq       },
  { "b2DistanceSquared", b2_b2DistanceSquared },
  { "b2Mul22"      , b2_b2Mul22           },
  { "b2Abs"        , b2_b2Abs             },
  { "b2Min"        , b2_b2Min             },
  { "b2Max"        , b2_b2Max             },
  { "b2Clamp"      , b2_b2Clamp           },
  { "b2NextPowerOfTwo", b2_b2NextPowerOfTwo  },
  { "b2IsPowerOfTwo", b2_b2IsPowerOfTwo    },
  { "b2Alloc"      , b2_b2Alloc           },
  { "b2Free"       , b2_b2Free            },
  { "b2TimeOfImpact", b2_b2TimeOfImpact    },
  { NULL, NULL},
};

// --=============================================== CONSTANTS
static const struct dub::const_Reg b2_const[] = {
  { "b2_staticBody", ::b2_staticBody      },
  { "b2_kinematicBody", ::b2_kinematicBody   },
  { "b2_dynamicBody", ::b2_dynamicBody     },
  { "b2_nullState" , ::b2_nullState       },
  { "b2_addState"  , ::b2_addState        },
  { "b2_persistState", ::b2_persistState    },
  { "b2_removeState", ::b2_removeState     },
  { "e_unknownJoint", ::e_unknownJoint     },
  { "e_revoluteJoint", ::e_revoluteJoint    },
  { "e_prismaticJoint", ::e_prismaticJoint   },
  { "e_distanceJoint", ::e_distanceJoint    },
  { "e_pulleyJoint", ::e_pulleyJoint      },
  { "e_mouseJoint" , ::e_mouseJoint       },
  { "e_gearJoint"  , ::e_gearJoint        },
  { "e_wheelJoint" , ::e_wheelJoint       },
  { "e_weldJoint"  , ::e_weldJoint        },
  { "e_frictionJoint", ::e_frictionJoint    },
  { "e_ropeJoint"  , ::e_ropeJoint        },
  { "e_motorJoint" , ::e_motorJoint       },
  { "e_inactiveLimit", ::e_inactiveLimit    },
  { "e_atLowerLimit", ::e_atLowerLimit     },
  { "e_atUpperLimit", ::e_atUpperLimit     },
  { "e_equalLimits", ::e_equalLimits      },
  { NULL, 0},
};

extern "C" int luaopen_b2_vendor(lua_State *L) {
  lua_newtable(L);
  // <lib>
  // register global constants
  dub::register_const(L, b2_const);
  dub::fregister(L, b2_functions);
  // <lib>

  luaopen_b2_b2BlockAllocator(L);
  // <b2.b2BlockAllocator>
  lua_setfield(L, -2, "b2BlockAllocator");
  
  luaopen_b2_b2BodyDef(L);
  // <b2.b2BodyDef>
  lua_setfield(L, -2, "b2BodyDef");
  
  luaopen_b2_b2Body(L);
  // <b2.b2Body>
  lua_setfield(L, -2, "b2Body");
  
  luaopen_b2_b2Pair(L);
  // <b2.b2Pair>
  lua_setfield(L, -2, "b2Pair");
  
  luaopen_b2_b2BroadPhase(L);
  // <b2.b2BroadPhase>
  lua_setfield(L, -2, "b2BroadPhase");
  
  luaopen_b2_b2ChainShape(L);
  // <b2.b2ChainShape>
  lua_setfield(L, -2, "b2ChainShape");
  
  luaopen_b2_b2CircleShape(L);
  // <b2.b2CircleShape>
  lua_setfield(L, -2, "b2CircleShape");
  
  luaopen_b2_b2ContactFeature(L);
  // <b2.b2ContactFeature>
  lua_setfield(L, -2, "b2ContactFeature");
  
  luaopen_b2_b2ContactID(L);
  // <b2.b2ContactID>
  lua_setfield(L, -2, "b2ContactID");
  
  luaopen_b2_b2ManifoldPoint(L);
  // <b2.b2ManifoldPoint>
  lua_setfield(L, -2, "b2ManifoldPoint");
  
  luaopen_b2_b2Manifold(L);
  // <b2.b2Manifold>
  lua_setfield(L, -2, "b2Manifold");
  
  luaopen_b2_b2WorldManifold(L);
  // <b2.b2WorldManifold>
  lua_setfield(L, -2, "b2WorldManifold");
  
  luaopen_b2_b2ClipVertex(L);
  // <b2.b2ClipVertex>
  lua_setfield(L, -2, "b2ClipVertex");
  
  luaopen_b2_b2RayCastInput(L);
  // <b2.b2RayCastInput>
  lua_setfield(L, -2, "b2RayCastInput");
  
  luaopen_b2_b2RayCastOutput(L);
  // <b2.b2RayCastOutput>
  lua_setfield(L, -2, "b2RayCastOutput");
  
  luaopen_b2_b2AABB(L);
  // <b2.b2AABB>
  lua_setfield(L, -2, "b2AABB");
  
  luaopen_b2_b2ContactManager(L);
  // <b2.b2ContactManager>
  lua_setfield(L, -2, "b2ContactManager");
  
  luaopen_b2_b2DistanceProxy(L);
  // <b2.b2DistanceProxy>
  lua_setfield(L, -2, "b2DistanceProxy");
  
  luaopen_b2_b2SimplexCache(L);
  // <b2.b2SimplexCache>
  lua_setfield(L, -2, "b2SimplexCache");
  
  luaopen_b2_b2DistanceInput(L);
  // <b2.b2DistanceInput>
  lua_setfield(L, -2, "b2DistanceInput");
  
  luaopen_b2_b2DistanceOutput(L);
  // <b2.b2DistanceOutput>
  lua_setfield(L, -2, "b2DistanceOutput");
  
  luaopen_b2_b2DistanceJointDef(L);
  // <b2.b2DistanceJointDef>
  lua_setfield(L, -2, "b2DistanceJointDef");
  
  luaopen_b2_b2DistanceJoint(L);
  // <b2.b2DistanceJoint>
  lua_setfield(L, -2, "b2DistanceJoint");
  
  luaopen_b2_b2Color(L);
  // <b2.b2Color>
  lua_setfield(L, -2, "b2Color");
  
  luaopen_b2_b2Draw(L);
  // <b2.b2Draw>
  lua_setfield(L, -2, "b2Draw");
  
  luaopen_b2_b2TreeNode(L);
  // <b2.b2TreeNode>
  lua_setfield(L, -2, "b2TreeNode");
  
  luaopen_b2_b2DynamicTree(L);
  // <b2.b2DynamicTree>
  lua_setfield(L, -2, "b2DynamicTree");
  
  luaopen_b2_b2EdgeShape(L);
  // <b2.b2EdgeShape>
  lua_setfield(L, -2, "b2EdgeShape");
  
  luaopen_b2_b2Filter(L);
  // <b2.b2Filter>
  lua_setfield(L, -2, "b2Filter");
  
  luaopen_b2_b2FixtureDef(L);
  // <b2.b2FixtureDef>
  lua_setfield(L, -2, "b2FixtureDef");
  
  luaopen_b2_b2FixtureProxy(L);
  // <b2.b2FixtureProxy>
  lua_setfield(L, -2, "b2FixtureProxy");
  
  luaopen_b2_b2Fixture(L);
  // <b2.b2Fixture>
  lua_setfield(L, -2, "b2Fixture");
  
  luaopen_b2_b2FrictionJointDef(L);
  // <b2.b2FrictionJointDef>
  lua_setfield(L, -2, "b2FrictionJointDef");
  
  luaopen_b2_b2FrictionJoint(L);
  // <b2.b2FrictionJoint>
  lua_setfield(L, -2, "b2FrictionJoint");
  
  luaopen_b2_b2GearJointDef(L);
  // <b2.b2GearJointDef>
  lua_setfield(L, -2, "b2GearJointDef");
  
  luaopen_b2_b2GearJoint(L);
  // <b2.b2GearJoint>
  lua_setfield(L, -2, "b2GearJoint");
  
  luaopen_b2_b2Island(L);
  // <b2.b2Island>
  lua_setfield(L, -2, "b2Island");
  
  luaopen_b2_b2Jacobian(L);
  // <b2.b2Jacobian>
  lua_setfield(L, -2, "b2Jacobian");
  
  luaopen_b2_b2JointEdge(L);
  // <b2.b2JointEdge>
  lua_setfield(L, -2, "b2JointEdge");
  
  luaopen_b2_b2JointDef(L);
  // <b2.b2JointDef>
  lua_setfield(L, -2, "b2JointDef");
  
  luaopen_b2_b2Joint(L);
  // <b2.b2Joint>
  lua_setfield(L, -2, "b2Joint");
  
  luaopen_b2_b2Vec2(L);
  // <b2.b2Vec2>
  lua_setfield(L, -2, "b2Vec2");
  
  luaopen_b2_b2Vec3(L);
  // <b2.b2Vec3>
  lua_setfield(L, -2, "b2Vec3");
  
  luaopen_b2_b2Mat22(L);
  // <b2.b2Mat22>
  lua_setfield(L, -2, "b2Mat22");
  
  luaopen_b2_b2Mat33(L);
  // <b2.b2Mat33>
  lua_setfield(L, -2, "b2Mat33");
  
  luaopen_b2_b2Rot(L);
  // <b2.b2Rot>
  lua_setfield(L, -2, "b2Rot");
  
  luaopen_b2_b2Transform(L);
  // <b2.b2Transform>
  lua_setfield(L, -2, "b2Transform");
  
  luaopen_b2_b2Sweep(L);
  // <b2.b2Sweep>
  lua_setfield(L, -2, "b2Sweep");
  
  luaopen_b2_b2MotorJointDef(L);
  // <b2.b2MotorJointDef>
  lua_setfield(L, -2, "b2MotorJointDef");
  
  luaopen_b2_b2MotorJoint(L);
  // <b2.b2MotorJoint>
  lua_setfield(L, -2, "b2MotorJoint");
  
  luaopen_b2_b2MouseJointDef(L);
  // <b2.b2MouseJointDef>
  lua_setfield(L, -2, "b2MouseJointDef");
  
  luaopen_b2_b2MouseJoint(L);
  // <b2.b2MouseJoint>
  lua_setfield(L, -2, "b2MouseJoint");
  
  luaopen_b2_b2PolygonShape(L);
  // <b2.b2PolygonShape>
  lua_setfield(L, -2, "b2PolygonShape");
  
  luaopen_b2_b2PrismaticJointDef(L);
  // <b2.b2PrismaticJointDef>
  lua_setfield(L, -2, "b2PrismaticJointDef");
  
  luaopen_b2_b2PrismaticJoint(L);
  // <b2.b2PrismaticJoint>
  lua_setfield(L, -2, "b2PrismaticJoint");
  
  luaopen_b2_b2PulleyJointDef(L);
  // <b2.b2PulleyJointDef>
  lua_setfield(L, -2, "b2PulleyJointDef");
  
  luaopen_b2_b2PulleyJoint(L);
  // <b2.b2PulleyJoint>
  lua_setfield(L, -2, "b2PulleyJoint");
  
  luaopen_b2_b2RevoluteJointDef(L);
  // <b2.b2RevoluteJointDef>
  lua_setfield(L, -2, "b2RevoluteJointDef");
  
  luaopen_b2_b2RevoluteJoint(L);
  // <b2.b2RevoluteJoint>
  lua_setfield(L, -2, "b2RevoluteJoint");
  
  luaopen_b2_b2RopeDef(L);
  // <b2.b2RopeDef>
  lua_setfield(L, -2, "b2RopeDef");
  
  luaopen_b2_b2Rope(L);
  luaopen_b2_b2RopeJointDef(L);
  // <b2.b2RopeJointDef>
  lua_setfield(L, -2, "b2RopeJointDef");
  
  // <b2.b2Rope>
  lua_setfield(L, -2, "b2Rope");
  
  luaopen_b2_b2RopeJoint(L);
  // <b2.b2RopeJoint>
  lua_setfield(L, -2, "b2RopeJoint");
  
  luaopen_b2_b2Version(L);
  // <b2.b2Version>
  lua_setfield(L, -2, "b2Version");
  
  luaopen_b2_b2MassData(L);
  // <b2.b2MassData>
  lua_setfield(L, -2, "b2MassData");
  
  luaopen_b2_b2Shape(L);
  // <b2.b2Shape>
  lua_setfield(L, -2, "b2Shape");
  
  luaopen_b2_b2StackEntry(L);
  // <b2.b2StackEntry>
  lua_setfield(L, -2, "b2StackEntry");
  
  luaopen_b2_b2StackAllocator(L);
  // <b2.b2StackAllocator>
  lua_setfield(L, -2, "b2StackAllocator");
  
  luaopen_b2_b2Timer(L);
  // <b2.b2Timer>
  lua_setfield(L, -2, "b2Timer");
  
  luaopen_b2_b2TOIInput(L);
  // <b2.b2TOIInput>
  lua_setfield(L, -2, "b2TOIInput");
  
  luaopen_b2_b2TOIOutput(L);
  // <b2.b2TOIOutput>
  lua_setfield(L, -2, "b2TOIOutput");
  
  luaopen_b2_b2Profile(L);
  // <b2.b2Profile>
  lua_setfield(L, -2, "b2Profile");
  
  luaopen_b2_b2TimeStep(L);
  // <b2.b2TimeStep>
  lua_setfield(L, -2, "b2TimeStep");
  
  luaopen_b2_b2Position(L);
  // <b2.b2Position>
  lua_setfield(L, -2, "b2Position");
  
  luaopen_b2_b2Velocity(L);
  // <b2.b2Velocity>
  lua_setfield(L, -2, "b2Velocity");
  
  luaopen_b2_b2SolverData(L);
  // <b2.b2SolverData>
  lua_setfield(L, -2, "b2SolverData");
  
  luaopen_b2_b2WeldJointDef(L);
  // <b2.b2WeldJointDef>
  lua_setfield(L, -2, "b2WeldJointDef");
  
  luaopen_b2_b2WeldJoint(L);
  // <b2.b2WeldJoint>
  lua_setfield(L, -2, "b2WeldJoint");
  
  luaopen_b2_b2WheelJointDef(L);
  // <b2.b2WheelJointDef>
  lua_setfield(L, -2, "b2WheelJointDef");
  
  luaopen_b2_b2WheelJoint(L);
  // <b2.b2WheelJoint>
  lua_setfield(L, -2, "b2WheelJoint");
  
  luaopen_b2_b2World(L);
  // <b2.b2World>
  lua_setfield(L, -2, "b2World");
  
  luaopen_b2_b2DestructionListener(L);
  // <b2.b2DestructionListener>
  lua_setfield(L, -2, "b2DestructionListener");
  
  luaopen_b2_b2ContactFilter(L);
  // <b2.b2ContactFilter>
  lua_setfield(L, -2, "b2ContactFilter");
  
  luaopen_b2_b2ContactImpulse(L);
  // <b2.b2ContactImpulse>
  lua_setfield(L, -2, "b2ContactImpulse");
  
  luaopen_b2_b2ContactListener(L);
  // <b2.b2ContactListener>
  lua_setfield(L, -2, "b2ContactListener");
  
  luaopen_b2_b2QueryCallback(L);
  // <b2.b2QueryCallback>
  lua_setfield(L, -2, "b2QueryCallback");
  
  luaopen_b2_b2RayCastCallback(L);
  // <b2.b2RayCastCallback>
  lua_setfield(L, -2, "b2RayCastCallback");
  
  // <lib>
  return 1;
}
