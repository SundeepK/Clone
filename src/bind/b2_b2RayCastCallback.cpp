/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2RayCastCallback
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** virtual b2RayCastCallback::~b2RayCastCallback()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2WorldCallbacks.h:138
 */
static int b2RayCastCallback__b2RayCastCallback(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "b2.b2RayCastCallback"));
    if (userdata->gc) {
      b2RayCastCallback *self = (b2RayCastCallback *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual float32 b2RayCastCallback::ReportFixture(b2Fixture *fixture, const b2Vec2 &point, const b2Vec2 &normal, float32 fraction)=0
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2WorldCallbacks.h:151
 */
static int b2RayCastCallback_ReportFixture(lua_State *L) {
  try {
    b2RayCastCallback *self = *((b2RayCastCallback **)dub::checksdata(L, 1, "b2.b2RayCastCallback"));
    b2Fixture *fixture = *((b2Fixture **)dub::checksdata(L, 2, "b2.b2Fixture"));
    b2Vec2 *point = *((b2Vec2 **)dub::checksdata(L, 3, "b2.b2Vec2"));
    b2Vec2 *normal = *((b2Vec2 **)dub::checksdata(L, 4, "b2.b2Vec2"));
    float32 fraction = dub::checknumber(L, 5);
    lua_pushnumber(L, self->ReportFixture(fixture, *point, *normal, fraction));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ReportFixture: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ReportFixture: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2RayCastCallback___tostring(lua_State *L) {
  b2RayCastCallback *self = *((b2RayCastCallback **)dub::checksdata_n(L, 1, "b2.b2RayCastCallback"));
  lua_pushfstring(L, "b2.b2RayCastCallback: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2RayCastCallback_member_methods[] = {
  { "__gc"         , b2RayCastCallback__b2RayCastCallback },
  { "ReportFixture", b2RayCastCallback_ReportFixture },
  { "__tostring"   , b2RayCastCallback___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2RayCastCallback(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2RayCastCallback");
  // <mt>

  // register member methods
  dub::fregister(L, b2RayCastCallback_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2RayCastCallback");
  // <mt>
  return 1;
}
