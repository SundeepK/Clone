/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2Color
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** ~b2Color()
 * 
 */
static int b2Color__b2Color(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "b2.b2Color"));
    if (userdata->gc) {
      b2Color *self = (b2Color *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Set attributes (key, value)
 * 
 */
static int b2Color__set_(lua_State *L) {

  b2Color *self = *((b2Color **)dub::checksdata_n(L, 1, "b2.b2Color"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub::hash(key, 3);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "r")) break;
      self->r = luaL_checknumber(L, 3);
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "g")) break;
      self->g = luaL_checknumber(L, 3);
      return 0;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "b")) break;
      self->b = luaL_checknumber(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2Color__get_(lua_State *L) {

  b2Color *self = *((b2Color **)dub::checksdata_n(L, 1, "b2.b2Color", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub::hash(key, 3);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "r")) break;
      lua_pushnumber(L, self->r);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "g")) break;
      lua_pushnumber(L, self->g);
      return 1;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "b")) break;
      lua_pushnumber(L, self->b);
      return 1;
    }
  }
  return 0;
}

/** b2Color::b2Color()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Draw.h:27
 */
static int b2Color_b2Color(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float32 r = dub::checknumber(L, 1);
      float32 g = dub::checknumber(L, 2);
      float32 b = dub::checknumber(L, 3);
      b2Color *retval__ = new b2Color(r, g, b);
      dub::pushudata(L, retval__, "b2.b2Color", true);
      return 1;
    } else {
      b2Color *retval__ = new b2Color();
      dub::pushudata(L, retval__, "b2.b2Color", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Color::Set(float32 ri, float32 gi, float32 bi)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2Draw.h:29
 */
static int b2Color_Set(lua_State *L) {
  try {
    b2Color *self = *((b2Color **)dub::checksdata(L, 1, "b2.b2Color"));
    float32 ri = dub::checknumber(L, 2);
    float32 gi = dub::checknumber(L, 3);
    float32 bi = dub::checknumber(L, 4);
    self->Set(ri, gi, bi);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Set: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2Color___tostring(lua_State *L) {
  b2Color *self = *((b2Color **)dub::checksdata_n(L, 1, "b2.b2Color"));
  lua_pushfstring(L, "b2.b2Color: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2Color_member_methods[] = {
  { "__gc"         , b2Color__b2Color     },
  { "__newindex"   , b2Color__set_        },
  { "__index"      , b2Color__get_        },
  { "new"          , b2Color_b2Color      },
  { "Set"          , b2Color_Set          },
  { "__tostring"   , b2Color___tostring   },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2Color(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2Color");
  // <mt>

  // register member methods
  dub::fregister(L, b2Color_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2Color");
  // <mt>
  return 1;
}
