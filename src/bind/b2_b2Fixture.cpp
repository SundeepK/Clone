/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2Fixture
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** ~b2Fixture()
 * 
 */
static int b2Fixture__b2Fixture(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "b2.b2Fixture"));
    if (userdata->gc) {
      b2Fixture *self = (b2Fixture *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** b2Shape::Type b2Fixture::GetType() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:112
 */
static int b2Fixture_GetType(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    lua_pushnumber(L, self->GetType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetType: Unknown exception");
  }
  return dub::error(L);
}

/** b2Shape * b2Fixture::GetShape()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:117
 */
static int b2Fixture_GetShape(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    b2Shape *retval__ = self->GetShape();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Shape", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetShape: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Fixture::SetSensor(bool sensor)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:121
 */
static int b2Fixture_SetSensor(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    bool sensor = dub::checkboolean(L, 2);
    self->SetSensor(sensor);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetSensor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetSensor: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2Fixture::IsSensor() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:125
 */
static int b2Fixture_IsSensor(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    lua_pushboolean(L, self->IsSensor());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsSensor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsSensor: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Fixture::SetFilterData(const b2Filter &filter)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:130
 */
static int b2Fixture_SetFilterData(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    b2Filter *filter = *((b2Filter **)dub::checksdata(L, 2, "b2.b2Filter"));
    self->SetFilterData(*filter);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetFilterData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetFilterData: Unknown exception");
  }
  return dub::error(L);
}

/** const b2Filter & b2Fixture::GetFilterData() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:133
 */
static int b2Fixture_GetFilterData(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    dub::pushudata(L, const_cast<b2Filter*>(&self->GetFilterData()), "b2.b2Filter", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetFilterData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetFilterData: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Fixture::Refilter()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:136
 */
static int b2Fixture_Refilter(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    self->Refilter();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Refilter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Refilter: Unknown exception");
  }
  return dub::error(L);
}

/** b2Body * b2Fixture::GetBody()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:140
 */
static int b2Fixture_GetBody(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    b2Body *retval__ = self->GetBody();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBody: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBody: Unknown exception");
  }
  return dub::error(L);
}

/** b2Fixture * b2Fixture::GetNext()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:145
 */
static int b2Fixture_GetNext(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    b2Fixture *retval__ = self->GetNext();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Fixture", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetNext: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetNext: Unknown exception");
  }
  return dub::error(L);
}

/** void * b2Fixture::GetUserData() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:150
 */
static int b2Fixture_GetUserData(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    self->GetUserData();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUserData: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Fixture::SetUserData(void *data)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:153
 */
static int b2Fixture_SetUserData(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    void *data = *((void **)dub::checksdata(L, 2, "void"));
    self->SetUserData(data);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetUserData: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2Fixture::TestPoint(const b2Vec2 &p) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:157
 */
static int b2Fixture_TestPoint(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    b2Vec2 *p = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    lua_pushboolean(L, self->TestPoint(*p));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "TestPoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "TestPoint: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2Fixture::RayCast(b2RayCastOutput *output, const b2RayCastInput &input, int32 childIndex) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:162
 */
static int b2Fixture_RayCast(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    b2RayCastOutput *output = *((b2RayCastOutput **)dub::checksdata(L, 2, "b2.b2RayCastOutput"));
    b2RayCastInput *input = *((b2RayCastInput **)dub::checksdata(L, 3, "b2.b2RayCastInput"));
    int32 childIndex = dub::checkint(L, 4);
    lua_pushboolean(L, self->RayCast(output, *input, childIndex));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "RayCast: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "RayCast: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Fixture::GetMassData(b2MassData *massData) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:167
 */
static int b2Fixture_GetMassData(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    b2MassData *massData = *((b2MassData **)dub::checksdata(L, 2, "b2.b2MassData"));
    self->GetMassData(massData);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMassData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMassData: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Fixture::SetDensity(float32 density)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:171
 */
static int b2Fixture_SetDensity(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    float32 density = dub::checknumber(L, 2);
    self->SetDensity(density);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetDensity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetDensity: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2Fixture::GetDensity() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:174
 */
static int b2Fixture_GetDensity(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    lua_pushnumber(L, self->GetDensity());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetDensity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetDensity: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2Fixture::GetFriction() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:177
 */
static int b2Fixture_GetFriction(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    lua_pushnumber(L, self->GetFriction());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetFriction: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Fixture::SetFriction(float32 friction)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:181
 */
static int b2Fixture_SetFriction(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    float32 friction = dub::checknumber(L, 2);
    self->SetFriction(friction);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetFriction: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2Fixture::GetRestitution() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:184
 */
static int b2Fixture_GetRestitution(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    lua_pushnumber(L, self->GetRestitution());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetRestitution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetRestitution: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Fixture::SetRestitution(float32 restitution)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:188
 */
static int b2Fixture_SetRestitution(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    float32 restitution = dub::checknumber(L, 2);
    self->SetRestitution(restitution);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetRestitution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetRestitution: Unknown exception");
  }
  return dub::error(L);
}

/** const b2AABB & b2Fixture::GetAABB(int32 childIndex) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:193
 */
static int b2Fixture_GetAABB(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    int32 childIndex = dub::checkint(L, 2);
    dub::pushudata(L, const_cast<b2AABB*>(&self->GetAABB(childIndex)), "b2.b2AABB", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAABB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAABB: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Fixture::Dump(int32 bodyIndex)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/b2Fixture.h:196
 */
static int b2Fixture_Dump(lua_State *L) {
  try {
    b2Fixture *self = *((b2Fixture **)dub::checksdata(L, 1, "b2.b2Fixture"));
    int32 bodyIndex = dub::checkint(L, 2);
    self->Dump(bodyIndex);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dump: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dump: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2Fixture___tostring(lua_State *L) {
  b2Fixture *self = *((b2Fixture **)dub::checksdata_n(L, 1, "b2.b2Fixture"));
  lua_pushfstring(L, "b2.b2Fixture: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2Fixture_member_methods[] = {
  { "__gc"         , b2Fixture__b2Fixture },
  { "GetType"      , b2Fixture_GetType    },
  { "GetShape"     , b2Fixture_GetShape   },
  { "SetSensor"    , b2Fixture_SetSensor  },
  { "IsSensor"     , b2Fixture_IsSensor   },
  { "SetFilterData", b2Fixture_SetFilterData },
  { "GetFilterData", b2Fixture_GetFilterData },
  { "Refilter"     , b2Fixture_Refilter   },
  { "GetBody"      , b2Fixture_GetBody    },
  { "GetNext"      , b2Fixture_GetNext    },
  { "GetUserData"  , b2Fixture_GetUserData },
  { "SetUserData"  , b2Fixture_SetUserData },
  { "TestPoint"    , b2Fixture_TestPoint  },
  { "RayCast"      , b2Fixture_RayCast    },
  { "GetMassData"  , b2Fixture_GetMassData },
  { "SetDensity"   , b2Fixture_SetDensity },
  { "GetDensity"   , b2Fixture_GetDensity },
  { "GetFriction"  , b2Fixture_GetFriction },
  { "SetFriction"  , b2Fixture_SetFriction },
  { "GetRestitution", b2Fixture_GetRestitution },
  { "SetRestitution", b2Fixture_SetRestitution },
  { "GetAABB"      , b2Fixture_GetAABB    },
  { "Dump"         , b2Fixture_Dump       },
  { "__tostring"   , b2Fixture___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2Fixture(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2Fixture");
  // <mt>

  // register member methods
  dub::fregister(L, b2Fixture_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2Fixture");
  // <mt>
  return 1;
}
