/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2DistanceProxy
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** ~b2DistanceProxy()
 * 
 */
static int b2DistanceProxy__b2DistanceProxy(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "b2.b2DistanceProxy"));
    if (userdata->gc) {
      b2DistanceProxy *self = (b2DistanceProxy *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Set attributes (key, value)
 * 
 */
static int b2DistanceProxy__set_(lua_State *L) {

  b2DistanceProxy *self = *((b2DistanceProxy **)dub::checksdata_n(L, 1, "b2.b2DistanceProxy"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub::hash(key, 4);
  switch(key_h) {
    case 3: {
      if (DUB_ASSERT_KEY(key, "m_vertices")) break;
      dub::protect(L, 1, 3, "m_vertices");
      self->m_vertices = *((b2Vec2 **)dub::checksdata_n(L, 3, "b2.b2Vec2"));
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "m_count")) break;
      self->m_count = luaL_checkint(L, 3);
      return 0;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "m_radius")) break;
      self->m_radius = luaL_checknumber(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2DistanceProxy__get_(lua_State *L) {

  b2DistanceProxy *self = *((b2DistanceProxy **)dub::checksdata_n(L, 1, "b2.b2DistanceProxy", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub::hash(key, 4);
  switch(key_h) {
    case 3: {
      if (DUB_ASSERT_KEY(key, "m_vertices")) break;
      const b2Vec2 *retval__ = self->m_vertices;
      if (!retval__) return 0;
      dub::pushudata(L, const_cast<b2Vec2*>(retval__), "b2.b2Vec2", false);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "m_count")) break;
      lua_pushnumber(L, self->m_count);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "m_radius")) break;
      lua_pushnumber(L, self->m_radius);
      return 1;
    }
  }
  return 0;
}

/** Read m_buffer(size_t i)
 * 
 */
static int b2DistanceProxy_m_buffer(lua_State *L) {
  try {
    b2DistanceProxy *self = *((b2DistanceProxy **)dub::checksdata(L, 1, "b2.b2DistanceProxy"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      size_t i = dub::checkint(L, 2);
      b2Vec2 *v = *((b2Vec2 **)dub::checksdata(L, 3, "b2.b2Vec2"));
      if (!i || i > 2) return 0;
      self->m_buffer[i-1] = *v;
      return 0;
    } else {
      size_t i = dub::checkint(L, 2);
      if (!i || i > 2) return 0;
      dub::pushudata(L, new b2Vec2(self->m_buffer[i-1]), "b2.b2Vec2", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "m_buffer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "m_buffer: Unknown exception");
  }
  return dub::error(L);
}

/** b2DistanceProxy::b2DistanceProxy()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Distance.h:31
 */
static int b2DistanceProxy_b2DistanceProxy(lua_State *L) {
  try {
    b2DistanceProxy *retval__ = new b2DistanceProxy();
    dub::pushudata(L, retval__, "b2.b2DistanceProxy", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** void b2DistanceProxy::Set(const b2Shape *shape, int32 index)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Distance.h:35
 */
static int b2DistanceProxy_Set(lua_State *L) {
  try {
    b2DistanceProxy *self = *((b2DistanceProxy **)dub::checksdata(L, 1, "b2.b2DistanceProxy"));
    b2Shape *shape = *((b2Shape **)dub::checksdata(L, 2, "b2.b2Shape"));
    int32 index = dub::checkint(L, 3);
    self->Set(shape, index);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Set: Unknown exception");
  }
  return dub::error(L);
}

/** int32 b2DistanceProxy::GetSupport(const b2Vec2 &d) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Distance.h:38
 */
static int b2DistanceProxy_GetSupport(lua_State *L) {
  try {
    b2DistanceProxy *self = *((b2DistanceProxy **)dub::checksdata(L, 1, "b2.b2DistanceProxy"));
    b2Vec2 *d = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    lua_pushnumber(L, self->GetSupport(*d));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetSupport: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetSupport: Unknown exception");
  }
  return dub::error(L);
}

/** const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &d) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Distance.h:41
 */
static int b2DistanceProxy_GetSupportVertex(lua_State *L) {
  try {
    b2DistanceProxy *self = *((b2DistanceProxy **)dub::checksdata(L, 1, "b2.b2DistanceProxy"));
    b2Vec2 *d = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    dub::pushudata(L, const_cast<b2Vec2*>(&self->GetSupportVertex(*d)), "b2.b2Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetSupportVertex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetSupportVertex: Unknown exception");
  }
  return dub::error(L);
}

/** int32 b2DistanceProxy::GetVertexCount() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Distance.h:44
 */
static int b2DistanceProxy_GetVertexCount(lua_State *L) {
  try {
    b2DistanceProxy *self = *((b2DistanceProxy **)dub::checksdata(L, 1, "b2.b2DistanceProxy"));
    lua_pushnumber(L, self->GetVertexCount());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetVertexCount: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetVertexCount: Unknown exception");
  }
  return dub::error(L);
}

/** const b2Vec2 & b2DistanceProxy::GetVertex(int32 index) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Distance.h:47
 */
static int b2DistanceProxy_GetVertex(lua_State *L) {
  try {
    b2DistanceProxy *self = *((b2DistanceProxy **)dub::checksdata(L, 1, "b2.b2DistanceProxy"));
    int32 index = dub::checkint(L, 2);
    dub::pushudata(L, const_cast<b2Vec2*>(&self->GetVertex(index)), "b2.b2Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetVertex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetVertex: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2DistanceProxy___tostring(lua_State *L) {
  b2DistanceProxy *self = *((b2DistanceProxy **)dub::checksdata_n(L, 1, "b2.b2DistanceProxy"));
  lua_pushfstring(L, "b2.b2DistanceProxy: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2DistanceProxy_member_methods[] = {
  { "__gc"         , b2DistanceProxy__b2DistanceProxy },
  { "__newindex"   , b2DistanceProxy__set_ },
  { "__index"      , b2DistanceProxy__get_ },
  { "m_buffer"     , b2DistanceProxy_m_buffer },
  { "new"          , b2DistanceProxy_b2DistanceProxy },
  { "Set"          , b2DistanceProxy_Set  },
  { "GetSupport"   , b2DistanceProxy_GetSupport },
  { "GetSupportVertex", b2DistanceProxy_GetSupportVertex },
  { "GetVertexCount", b2DistanceProxy_GetVertexCount },
  { "GetVertex"    , b2DistanceProxy_GetVertex },
  { "__tostring"   , b2DistanceProxy___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2DistanceProxy(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2DistanceProxy");
  // <mt>

  // register member methods
  dub::fregister(L, b2DistanceProxy_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2DistanceProxy");
  // <mt>
  return 1;
}
