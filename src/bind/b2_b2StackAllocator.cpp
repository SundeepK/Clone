/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2StackAllocator
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** b2StackAllocator::b2StackAllocator()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2StackAllocator.h:40
 */
static int b2StackAllocator_b2StackAllocator(lua_State *L) {
  try {
    b2StackAllocator *retval__ = new b2StackAllocator();
    dub::pushudata(L, retval__, "b2.b2StackAllocator", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** b2StackAllocator::~b2StackAllocator()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2StackAllocator.h:41
 */
static int b2StackAllocator__b2StackAllocator(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "b2.b2StackAllocator"));
    if (userdata->gc) {
      b2StackAllocator *self = (b2StackAllocator *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** void * b2StackAllocator::Allocate(int32 size)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2StackAllocator.h:43
 */
static int b2StackAllocator_Allocate(lua_State *L) {
  try {
    b2StackAllocator *self = *((b2StackAllocator **)dub::checksdata(L, 1, "b2.b2StackAllocator"));
    int32 size = dub::checkint(L, 2);
    self->Allocate(size);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Allocate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Allocate: Unknown exception");
  }
  return dub::error(L);
}

/** void b2StackAllocator::Free(void *p)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2StackAllocator.h:44
 */
static int b2StackAllocator_Free(lua_State *L) {
  try {
    b2StackAllocator *self = *((b2StackAllocator **)dub::checksdata(L, 1, "b2.b2StackAllocator"));
    void *p = *((void **)dub::checksdata(L, 2, "void"));
    self->Free(p);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Free: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Free: Unknown exception");
  }
  return dub::error(L);
}

/** int32 b2StackAllocator::GetMaxAllocation() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Common/b2StackAllocator.h:46
 */
static int b2StackAllocator_GetMaxAllocation(lua_State *L) {
  try {
    b2StackAllocator *self = *((b2StackAllocator **)dub::checksdata(L, 1, "b2.b2StackAllocator"));
    lua_pushnumber(L, self->GetMaxAllocation());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMaxAllocation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMaxAllocation: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2StackAllocator___tostring(lua_State *L) {
  b2StackAllocator *self = *((b2StackAllocator **)dub::checksdata_n(L, 1, "b2.b2StackAllocator"));
  lua_pushfstring(L, "b2.b2StackAllocator: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2StackAllocator_member_methods[] = {
  { "new"          , b2StackAllocator_b2StackAllocator },
  { "__gc"         , b2StackAllocator__b2StackAllocator },
  { "Allocate"     , b2StackAllocator_Allocate },
  { "Free"         , b2StackAllocator_Free },
  { "GetMaxAllocation", b2StackAllocator_GetMaxAllocation },
  { "__tostring"   , b2StackAllocator___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2StackAllocator(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2StackAllocator");
  // <mt>

  // register member methods
  dub::fregister(L, b2StackAllocator_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2StackAllocator");
  // <mt>
  return 1;
}
