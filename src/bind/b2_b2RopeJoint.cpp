/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2RopeJoint
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** ~b2RopeJoint()
 * 
 */
static int b2RopeJoint__b2RopeJoint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "b2.b2RopeJoint"));
    if (userdata->gc) {
      b2RopeJoint *self = (b2RopeJoint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Cast (class_name)
 * 
 */
static int b2RopeJoint__cast_(lua_State *L) {

  b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata_n(L, 1, "b2.b2RopeJoint"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "b2.b2Joint")) break;
      *retval__ = static_cast<b2Joint *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2Vec2 b2RopeJoint::GetAnchorA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2RopeJoint.h:61
 */
static int b2RopeJoint_GetAnchorA(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    dub::pushudata(L, new b2Vec2(self->GetAnchorA()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorA: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2RopeJoint::GetAnchorB() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2RopeJoint.h:62
 */
static int b2RopeJoint_GetAnchorB(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    dub::pushudata(L, new b2Vec2(self->GetAnchorB()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorB: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2RopeJoint::GetReactionForce(float32 inv_dt) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2RopeJoint.h:64
 */
static int b2RopeJoint_GetReactionForce(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    float32 inv_dt = dub::checknumber(L, 2);
    dub::pushudata(L, new b2Vec2(self->GetReactionForce(inv_dt)), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionForce: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2RopeJoint::GetReactionTorque(float32 inv_dt) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2RopeJoint.h:65
 */
static int b2RopeJoint_GetReactionTorque(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    float32 inv_dt = dub::checknumber(L, 2);
    lua_pushnumber(L, self->GetReactionTorque(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionTorque: Unknown exception");
  }
  return dub::error(L);
}

/** const b2Vec2& b2RopeJoint::GetLocalAnchorA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2RopeJoint.h:68
 */
static int b2RopeJoint_GetLocalAnchorA(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    dub::pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAnchorA()), "b2.b2Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAnchorA: Unknown exception");
  }
  return dub::error(L);
}

/** const b2Vec2& b2RopeJoint::GetLocalAnchorB() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2RopeJoint.h:71
 */
static int b2RopeJoint_GetLocalAnchorB(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    dub::pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAnchorB()), "b2.b2Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAnchorB: Unknown exception");
  }
  return dub::error(L);
}

/** void b2RopeJoint::SetMaxLength(float32 length)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2RopeJoint.h:74
 */
static int b2RopeJoint_SetMaxLength(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    float32 length = dub::checknumber(L, 2);
    self->SetMaxLength(length);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetMaxLength: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetMaxLength: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2RopeJoint::GetMaxLength() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2RopeJoint.h:75
 */
static int b2RopeJoint_GetMaxLength(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    lua_pushnumber(L, self->GetMaxLength());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMaxLength: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMaxLength: Unknown exception");
  }
  return dub::error(L);
}

/** b2LimitState b2RopeJoint::GetLimitState() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2RopeJoint.h:77
 */
static int b2RopeJoint_GetLimitState(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    lua_pushnumber(L, self->GetLimitState());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLimitState: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLimitState: Unknown exception");
  }
  return dub::error(L);
}

/** void b2RopeJoint::Dump()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2RopeJoint.h:80
 */
static int b2RopeJoint_Dump(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    self->Dump();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dump: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dump: Unknown exception");
  }
  return dub::error(L);
}

/** b2JointType b2Joint::GetType() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:108
 */
static int b2RopeJoint_GetType(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    lua_pushnumber(L, self->GetType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetType: Unknown exception");
  }
  return dub::error(L);
}

/** b2Body * b2Joint::GetBodyA()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:111
 */
static int b2RopeJoint_GetBodyA(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    b2Body *retval__ = self->GetBodyA();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyA: Unknown exception");
  }
  return dub::error(L);
}

/** b2Body * b2Joint::GetBodyB()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:114
 */
static int b2RopeJoint_GetBodyB(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    b2Body *retval__ = self->GetBodyB();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyB: Unknown exception");
  }
  return dub::error(L);
}

/** b2Joint * b2Joint::GetNext()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:129
 */
static int b2RopeJoint_GetNext(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    b2Joint *retval__ = self->GetNext();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetNext: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetNext: Unknown exception");
  }
  return dub::error(L);
}

/** void * b2Joint::GetUserData() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:133
 */
static int b2RopeJoint_GetUserData(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    self->GetUserData();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUserData: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Joint::SetUserData(void *data)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:136
 */
static int b2RopeJoint_SetUserData(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    void *data = *((void **)dub::checksdata(L, 2, "void"));
    self->SetUserData(data);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetUserData: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2Joint::IsActive() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:139
 */
static int b2RopeJoint_IsActive(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    lua_pushboolean(L, self->IsActive());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsActive: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsActive: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2Joint::GetCollideConnected() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:144
 */
static int b2RopeJoint_GetCollideConnected(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    lua_pushboolean(L, self->GetCollideConnected());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCollideConnected: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCollideConnected: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void b2Joint::ShiftOrigin(const b2Vec2 &newOrigin)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:150
 */
static int b2RopeJoint_ShiftOrigin(lua_State *L) {
  try {
    b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata(L, 1, "b2.b2RopeJoint"));
    b2Vec2 *newOrigin = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    self->ShiftOrigin(*newOrigin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShiftOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShiftOrigin: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2RopeJoint___tostring(lua_State *L) {
  b2RopeJoint *self = *((b2RopeJoint **)dub::checksdata_n(L, 1, "b2.b2RopeJoint"));
  lua_pushfstring(L, "b2.b2RopeJoint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2RopeJoint_member_methods[] = {
  { "__gc"         , b2RopeJoint__b2RopeJoint },
  { "_cast_"       , b2RopeJoint__cast_   },
  { "GetAnchorA"   , b2RopeJoint_GetAnchorA },
  { "GetAnchorB"   , b2RopeJoint_GetAnchorB },
  { "GetReactionForce", b2RopeJoint_GetReactionForce },
  { "GetReactionTorque", b2RopeJoint_GetReactionTorque },
  { "GetLocalAnchorA", b2RopeJoint_GetLocalAnchorA },
  { "GetLocalAnchorB", b2RopeJoint_GetLocalAnchorB },
  { "SetMaxLength" , b2RopeJoint_SetMaxLength },
  { "GetMaxLength" , b2RopeJoint_GetMaxLength },
  { "GetLimitState", b2RopeJoint_GetLimitState },
  { "Dump"         , b2RopeJoint_Dump     },
  { "GetType"      , b2RopeJoint_GetType  },
  { "GetBodyA"     , b2RopeJoint_GetBodyA },
  { "GetBodyB"     , b2RopeJoint_GetBodyB },
  { "GetNext"      , b2RopeJoint_GetNext  },
  { "GetUserData"  , b2RopeJoint_GetUserData },
  { "SetUserData"  , b2RopeJoint_SetUserData },
  { "IsActive"     , b2RopeJoint_IsActive },
  { "GetCollideConnected", b2RopeJoint_GetCollideConnected },
  { "ShiftOrigin"  , b2RopeJoint_ShiftOrigin },
  { "__tostring"   , b2RopeJoint___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2RopeJoint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2RopeJoint");
  // <mt>

  // register member methods
  dub::fregister(L, b2RopeJoint_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2RopeJoint");
  // <mt>
  return 1;
}
