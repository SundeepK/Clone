/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2WheelJoint
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** ~b2WheelJoint()
 * 
 */
static int b2WheelJoint__b2WheelJoint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "b2.b2WheelJoint"));
    if (userdata->gc) {
      b2WheelJoint *self = (b2WheelJoint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Cast (class_name)
 * 
 */
static int b2WheelJoint__cast_(lua_State *L) {

  b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata_n(L, 1, "b2.b2WheelJoint"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "b2.b2Joint")) break;
      *retval__ = static_cast<b2Joint *>(self);
      return 1;
    }
  }
  return 0;
}

/** b2Vec2 b2WheelJoint::GetAnchorA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:82
 */
static int b2WheelJoint_GetAnchorA(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    dub::pushudata(L, new b2Vec2(self->GetAnchorA()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorA: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2WheelJoint::GetAnchorB() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:83
 */
static int b2WheelJoint_GetAnchorB(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    dub::pushudata(L, new b2Vec2(self->GetAnchorB()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetAnchorB: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2WheelJoint::GetReactionForce(float32 inv_dt) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:85
 */
static int b2WheelJoint_GetReactionForce(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    float32 inv_dt = dub::checknumber(L, 2);
    dub::pushudata(L, new b2Vec2(self->GetReactionForce(inv_dt)), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionForce: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2WheelJoint::GetReactionTorque(float32 inv_dt) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:86
 */
static int b2WheelJoint_GetReactionTorque(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    float32 inv_dt = dub::checknumber(L, 2);
    lua_pushnumber(L, self->GetReactionTorque(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetReactionTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetReactionTorque: Unknown exception");
  }
  return dub::error(L);
}

/** const b2Vec2& b2WheelJoint::GetLocalAnchorA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:89
 */
static int b2WheelJoint_GetLocalAnchorA(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    dub::pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAnchorA()), "b2.b2Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAnchorA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAnchorA: Unknown exception");
  }
  return dub::error(L);
}

/** const b2Vec2& b2WheelJoint::GetLocalAnchorB() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:92
 */
static int b2WheelJoint_GetLocalAnchorB(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    dub::pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAnchorB()), "b2.b2Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAnchorB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAnchorB: Unknown exception");
  }
  return dub::error(L);
}

/** const b2Vec2& b2WheelJoint::GetLocalAxisA() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:95
 */
static int b2WheelJoint_GetLocalAxisA(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    dub::pushudata(L, const_cast<b2Vec2*>(&self->GetLocalAxisA()), "b2.b2Vec2", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetLocalAxisA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetLocalAxisA: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2WheelJoint::GetJointTranslation() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:98
 */
static int b2WheelJoint_GetJointTranslation(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    lua_pushnumber(L, self->GetJointTranslation());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetJointTranslation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetJointTranslation: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2WheelJoint::GetJointSpeed() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:101
 */
static int b2WheelJoint_GetJointSpeed(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    lua_pushnumber(L, self->GetJointSpeed());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetJointSpeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetJointSpeed: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2WheelJoint::IsMotorEnabled() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:104
 */
static int b2WheelJoint_IsMotorEnabled(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    lua_pushboolean(L, self->IsMotorEnabled());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsMotorEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsMotorEnabled: Unknown exception");
  }
  return dub::error(L);
}

/** void b2WheelJoint::EnableMotor(bool flag)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:107
 */
static int b2WheelJoint_EnableMotor(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    bool flag = dub::checkboolean(L, 2);
    self->EnableMotor(flag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "EnableMotor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "EnableMotor: Unknown exception");
  }
  return dub::error(L);
}

/** void b2WheelJoint::SetMotorSpeed(float32 speed)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:110
 */
static int b2WheelJoint_SetMotorSpeed(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    float32 speed = dub::checknumber(L, 2);
    self->SetMotorSpeed(speed);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetMotorSpeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetMotorSpeed: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2WheelJoint::GetMotorSpeed() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:113
 */
static int b2WheelJoint_GetMotorSpeed(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    lua_pushnumber(L, self->GetMotorSpeed());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMotorSpeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMotorSpeed: Unknown exception");
  }
  return dub::error(L);
}

/** void b2WheelJoint::SetMaxMotorTorque(float32 torque)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:116
 */
static int b2WheelJoint_SetMaxMotorTorque(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    float32 torque = dub::checknumber(L, 2);
    self->SetMaxMotorTorque(torque);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetMaxMotorTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetMaxMotorTorque: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2WheelJoint::GetMaxMotorTorque() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:117
 */
static int b2WheelJoint_GetMaxMotorTorque(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    lua_pushnumber(L, self->GetMaxMotorTorque());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMaxMotorTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMaxMotorTorque: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2WheelJoint::GetMotorTorque(float32 inv_dt) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:120
 */
static int b2WheelJoint_GetMotorTorque(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    float32 inv_dt = dub::checknumber(L, 2);
    lua_pushnumber(L, self->GetMotorTorque(inv_dt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetMotorTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetMotorTorque: Unknown exception");
  }
  return dub::error(L);
}

/** void b2WheelJoint::SetSpringFrequencyHz(float32 hz)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:123
 */
static int b2WheelJoint_SetSpringFrequencyHz(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    float32 hz = dub::checknumber(L, 2);
    self->SetSpringFrequencyHz(hz);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetSpringFrequencyHz: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetSpringFrequencyHz: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2WheelJoint::GetSpringFrequencyHz() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:124
 */
static int b2WheelJoint_GetSpringFrequencyHz(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    lua_pushnumber(L, self->GetSpringFrequencyHz());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetSpringFrequencyHz: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetSpringFrequencyHz: Unknown exception");
  }
  return dub::error(L);
}

/** void b2WheelJoint::SetSpringDampingRatio(float32 ratio)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:127
 */
static int b2WheelJoint_SetSpringDampingRatio(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    float32 ratio = dub::checknumber(L, 2);
    self->SetSpringDampingRatio(ratio);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetSpringDampingRatio: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetSpringDampingRatio: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2WheelJoint::GetSpringDampingRatio() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:128
 */
static int b2WheelJoint_GetSpringDampingRatio(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    lua_pushnumber(L, self->GetSpringDampingRatio());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetSpringDampingRatio: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetSpringDampingRatio: Unknown exception");
  }
  return dub::error(L);
}

/** void b2WheelJoint::Dump()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.h:131
 */
static int b2WheelJoint_Dump(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    self->Dump();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dump: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dump: Unknown exception");
  }
  return dub::error(L);
}

/** b2JointType b2Joint::GetType() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:108
 */
static int b2WheelJoint_GetType(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    lua_pushnumber(L, self->GetType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetType: Unknown exception");
  }
  return dub::error(L);
}

/** b2Body * b2Joint::GetBodyA()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:111
 */
static int b2WheelJoint_GetBodyA(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    b2Body *retval__ = self->GetBodyA();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyA: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyA: Unknown exception");
  }
  return dub::error(L);
}

/** b2Body * b2Joint::GetBodyB()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:114
 */
static int b2WheelJoint_GetBodyB(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    b2Body *retval__ = self->GetBodyB();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Body", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetBodyB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetBodyB: Unknown exception");
  }
  return dub::error(L);
}

/** b2Joint * b2Joint::GetNext()
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:129
 */
static int b2WheelJoint_GetNext(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    b2Joint *retval__ = self->GetNext();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "b2.b2Joint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetNext: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetNext: Unknown exception");
  }
  return dub::error(L);
}

/** void * b2Joint::GetUserData() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:133
 */
static int b2WheelJoint_GetUserData(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    self->GetUserData();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetUserData: Unknown exception");
  }
  return dub::error(L);
}

/** void b2Joint::SetUserData(void *data)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:136
 */
static int b2WheelJoint_SetUserData(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    void *data = *((void **)dub::checksdata(L, 2, "void"));
    self->SetUserData(data);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "SetUserData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "SetUserData: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2Joint::IsActive() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:139
 */
static int b2WheelJoint_IsActive(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    lua_pushboolean(L, self->IsActive());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsActive: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsActive: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2Joint::GetCollideConnected() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:144
 */
static int b2WheelJoint_GetCollideConnected(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    lua_pushboolean(L, self->GetCollideConnected());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCollideConnected: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCollideConnected: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void b2Joint::ShiftOrigin(const b2Vec2 &newOrigin)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Dynamics/Joints/b2Joint.h:150
 */
static int b2WheelJoint_ShiftOrigin(lua_State *L) {
  try {
    b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata(L, 1, "b2.b2WheelJoint"));
    b2Vec2 *newOrigin = *((b2Vec2 **)dub::checksdata(L, 2, "b2.b2Vec2"));
    self->ShiftOrigin(*newOrigin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ShiftOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ShiftOrigin: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2WheelJoint___tostring(lua_State *L) {
  b2WheelJoint *self = *((b2WheelJoint **)dub::checksdata_n(L, 1, "b2.b2WheelJoint"));
  lua_pushfstring(L, "b2.b2WheelJoint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2WheelJoint_member_methods[] = {
  { "__gc"         , b2WheelJoint__b2WheelJoint },
  { "_cast_"       , b2WheelJoint__cast_  },
  { "GetAnchorA"   , b2WheelJoint_GetAnchorA },
  { "GetAnchorB"   , b2WheelJoint_GetAnchorB },
  { "GetReactionForce", b2WheelJoint_GetReactionForce },
  { "GetReactionTorque", b2WheelJoint_GetReactionTorque },
  { "GetLocalAnchorA", b2WheelJoint_GetLocalAnchorA },
  { "GetLocalAnchorB", b2WheelJoint_GetLocalAnchorB },
  { "GetLocalAxisA", b2WheelJoint_GetLocalAxisA },
  { "GetJointTranslation", b2WheelJoint_GetJointTranslation },
  { "GetJointSpeed", b2WheelJoint_GetJointSpeed },
  { "IsMotorEnabled", b2WheelJoint_IsMotorEnabled },
  { "EnableMotor"  , b2WheelJoint_EnableMotor },
  { "SetMotorSpeed", b2WheelJoint_SetMotorSpeed },
  { "GetMotorSpeed", b2WheelJoint_GetMotorSpeed },
  { "SetMaxMotorTorque", b2WheelJoint_SetMaxMotorTorque },
  { "GetMaxMotorTorque", b2WheelJoint_GetMaxMotorTorque },
  { "GetMotorTorque", b2WheelJoint_GetMotorTorque },
  { "SetSpringFrequencyHz", b2WheelJoint_SetSpringFrequencyHz },
  { "GetSpringFrequencyHz", b2WheelJoint_GetSpringFrequencyHz },
  { "SetSpringDampingRatio", b2WheelJoint_SetSpringDampingRatio },
  { "GetSpringDampingRatio", b2WheelJoint_GetSpringDampingRatio },
  { "Dump"         , b2WheelJoint_Dump    },
  { "GetType"      , b2WheelJoint_GetType },
  { "GetBodyA"     , b2WheelJoint_GetBodyA },
  { "GetBodyB"     , b2WheelJoint_GetBodyB },
  { "GetNext"      , b2WheelJoint_GetNext },
  { "GetUserData"  , b2WheelJoint_GetUserData },
  { "SetUserData"  , b2WheelJoint_SetUserData },
  { "IsActive"     , b2WheelJoint_IsActive },
  { "GetCollideConnected", b2WheelJoint_GetCollideConnected },
  { "ShiftOrigin"  , b2WheelJoint_ShiftOrigin },
  { "__tostring"   , b2WheelJoint___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2WheelJoint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2WheelJoint");
  // <mt>

  // register member methods
  dub::fregister(L, b2WheelJoint_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2WheelJoint");
  // <mt>
  return 1;
}
