/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class b2AABB
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include <Box2D/Box2D.h>


/** Set attributes (key, value)
 * 
 */
static int b2AABB__set_(lua_State *L) {

  b2AABB *self = *((b2AABB **)dub::checksdata_n(L, 1, "b2.b2AABB"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "lowerBound")) break;
      self->lowerBound = **((b2Vec2 **)dub::checksdata_n(L, 3, "b2.b2Vec2"));
      return 0;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "upperBound")) break;
      self->upperBound = **((b2Vec2 **)dub::checksdata_n(L, 3, "b2.b2Vec2"));
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int b2AABB__get_(lua_State *L) {

  b2AABB *self = *((b2AABB **)dub::checksdata_n(L, 1, "b2.b2AABB", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "lowerBound")) break;
      dub::pushudata(L, &self->lowerBound, "b2.b2Vec2", false);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "upperBound")) break;
      dub::pushudata(L, &self->upperBound, "b2.b2Vec2", false);
      return 1;
    }
  }
  return 0;
}

/** b2AABB()
 * 
 */
static int b2AABB_b2AABB(lua_State *L) {
  try {
    b2AABB *retval__ = new b2AABB();
    dub::pushudata(L, retval__, "b2.b2AABB", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2AABB::IsValid() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:165
 */
static int b2AABB_IsValid(lua_State *L) {
  try {
    b2AABB *self = *((b2AABB **)dub::checksdata(L, 1, "b2.b2AABB"));
    lua_pushboolean(L, self->IsValid());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "IsValid: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "IsValid: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2AABB::GetCenter() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:168
 */
static int b2AABB_GetCenter(lua_State *L) {
  try {
    b2AABB *self = *((b2AABB **)dub::checksdata(L, 1, "b2.b2AABB"));
    dub::pushudata(L, new b2Vec2(self->GetCenter()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetCenter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetCenter: Unknown exception");
  }
  return dub::error(L);
}

/** b2Vec2 b2AABB::GetExtents() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:174
 */
static int b2AABB_GetExtents(lua_State *L) {
  try {
    b2AABB *self = *((b2AABB **)dub::checksdata(L, 1, "b2.b2AABB"));
    dub::pushudata(L, new b2Vec2(self->GetExtents()), "b2.b2Vec2", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetExtents: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetExtents: Unknown exception");
  }
  return dub::error(L);
}

/** float32 b2AABB::GetPerimeter() const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:180
 */
static int b2AABB_GetPerimeter(lua_State *L) {
  try {
    b2AABB *self = *((b2AABB **)dub::checksdata(L, 1, "b2.b2AABB"));
    lua_pushnumber(L, self->GetPerimeter());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "GetPerimeter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "GetPerimeter: Unknown exception");
  }
  return dub::error(L);
}

/** void b2AABB::Combine(const b2AABB &aabb)
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:188
 */
static int b2AABB_Combine(lua_State *L) {
  try {
    b2AABB *self = *((b2AABB **)dub::checksdata(L, 1, "b2.b2AABB"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      b2AABB *aabb1 = *((b2AABB **)dub::checksdata(L, 2, "b2.b2AABB"));
      b2AABB *aabb2 = *((b2AABB **)dub::checksdata(L, 3, "b2.b2AABB"));
      self->Combine(*aabb1, *aabb2);
      return 0;
    } else {
      b2AABB *aabb = *((b2AABB **)dub::checksdata(L, 2, "b2.b2AABB"));
      self->Combine(*aabb);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "Combine: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Combine: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2AABB::Contains(const b2AABB &aabb) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:202
 */
static int b2AABB_Contains(lua_State *L) {
  try {
    b2AABB *self = *((b2AABB **)dub::checksdata(L, 1, "b2.b2AABB"));
    b2AABB *aabb = *((b2AABB **)dub::checksdata(L, 2, "b2.b2AABB"));
    lua_pushboolean(L, self->Contains(*aabb));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Contains: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Contains: Unknown exception");
  }
  return dub::error(L);
}

/** bool b2AABB::RayCast(b2RayCastOutput *output, const b2RayCastInput &input) const
 * /media/sundeep/3 tb Vol/code/Clone-game-repo/Clone-game/vendor/Box2D/Box2D/Collision/b2Collision.h:212
 */
static int b2AABB_RayCast(lua_State *L) {
  try {
    b2AABB *self = *((b2AABB **)dub::checksdata(L, 1, "b2.b2AABB"));
    b2RayCastOutput *output = *((b2RayCastOutput **)dub::checksdata(L, 2, "b2.b2RayCastOutput"));
    b2RayCastInput *input = *((b2RayCastInput **)dub::checksdata(L, 3, "b2.b2RayCastInput"));
    lua_pushboolean(L, self->RayCast(output, *input));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "RayCast: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "RayCast: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int b2AABB___tostring(lua_State *L) {
  b2AABB *self = *((b2AABB **)dub::checksdata_n(L, 1, "b2.b2AABB"));
  lua_pushfstring(L, "b2.b2AABB: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg b2AABB_member_methods[] = {
  { "__newindex"   , b2AABB__set_         },
  { "__index"      , b2AABB__get_         },
  { "new"          , b2AABB_b2AABB        },
  { "IsValid"      , b2AABB_IsValid       },
  { "GetCenter"    , b2AABB_GetCenter     },
  { "GetExtents"   , b2AABB_GetExtents    },
  { "GetPerimeter" , b2AABB_GetPerimeter  },
  { "Combine"      , b2AABB_Combine       },
  { "Contains"     , b2AABB_Contains      },
  { "RayCast"      , b2AABB_RayCast       },
  { "__tostring"   , b2AABB___tostring    },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_b2_b2AABB(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "b2.b2AABB");
  // <mt>

  // register member methods
  dub::fregister(L, b2AABB_member_methods);
  // setup meta-table
  dub::setup(L, "b2.b2AABB");
  // <mt>
  return 1;
}
